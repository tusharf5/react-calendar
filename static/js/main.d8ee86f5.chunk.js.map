{"version":3,"sources":["awesome-react-calendar/constants.ts","awesome-react-calendar/date-utils.ts","awesome-react-calendar/calendar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NATIVE_INDEX_TO_LABEL_WEEKDAY_MAP","0","1","2","3","4","5","6","NATIVE_INDEX_TO_LABEL_MONTHS_MAP","7","8","9","10","11","toString","date","getFullYear","getMonth","getDate","isBefore","toCheckDate","year","month","monthDate","isValid","isNaN","Date","getTime","isPartValid","isEqual","first","second","isPartOfRange","rangeStart","rangeEnd","isALeapYear","getNumberOfDaysInAMonth","getNativeWeekDayIndexFromAStartDayInfluencedIndex","weekdayAsPerChangedIndex","startOfTheWeek","diversion","getPreviousMonth","getNextMonth","getPreviousYear","getNextYear","getStartOfRangeForAYear","Number","toFixed","getDaysOfMonthViewMetrix","params","isRangeSelectModeOn","newRangeStartYear","newRangeStartDate","newRangeStartMonth","newRangeEndYear","newRangeEndDate","isSelectMultiDate","selectedMultiDates","newRangeEndMonth","isRangeView","selectedEndDayOfMonth","selectedEndMonth","weekendIndexes","selectedEndYear","selectedStartDayOfMonth","selectedStartMonth","selectedStartYear","yearInView","monthInView","selectedYear","selectedMonth","selectedDayOfMonth","disableFuture","disablePast","disableToday","maxDate","minDate","applyMax","applyMin","isDisabled","matrix","currentMonthDatesStartIndex","setDate","setMonth","setFullYear","weekdayAsPerNativeIndex","getInfluencedWeekDayIndexAsPerAStartDay","getDay","getInfluencedWeekDayIndexOnFirstDateOfMonth","weekends","checkDisabledForADate","customDisabledCheck","dayOfMonth","currentYear","currentMonth","maxDateParts","minDateParts","weekday","checkIfDateIsDisabledHOF","todaysDate","todaysMonth","todaysYear","totalDaysInCurrentMonth","isPrevMonthFromLastYear","isCurrentMonthLast","totalDaysInPrevMonth","row","weekColumn","currMonth","currYear","currDate","newRangeStart","newRangeEnd","push","activeMonthInView","isInRange","isRangeStart","isRangeEnd","isWeekend","find","c","dayOfWeek","isToday","isFirstRow","isLastRow","isFirsColumn","isLastColumn","isSelected","length","Calendar","selectRange","startdate","initialViewDate","endDate","startOfWeek","maxAllowedDate","minAllowedDate","selectMultiDates","onChange","separator","format","useState","applyMaxConstraint","applyminConstraint","Array","isArray","every","num","getWeekendInfo","view","setView","setMonthInView","setYearInView","setSelectedMultiDates","setSelectedMonth","selectedDate","setSelectedDate","setSelectedYear","setIsRangeSelectModeOn","setSelectedStartMonth","selectedStartDate","setSelectedStartDate","setSelectedStartYear","setSelectedEndMonth","selectedEndDate","setSelectedEndDate","setSelectedEndYear","setNewRangeStartMonth","setNewRangeStartDate","setNewRangeStartYear","setNewRangeEndMonth","setNewRangeEndDate","setNewRangeEndYear","startingYearForCurrRange","setStartingYearForCurrRange","useMemo","rangeStartYear","yearMatrixRangeStart","yearMatrixRangeEnd","WEEK_DAYS","Object","keys","slice","concat","reduce","acc","weekdayIndex","index","getWeekDaysIndexToLabelMapForAStartOfTheWeek","formatter","partsMap","YYYY","MM","DD","parts","split","Error","part","string","forEach","validateAndReturnDateFormatter","useEffect","yearsViewMatrix","years","from","v","isCurrentYear","isSelectedYear","getYearsViewMetrix","monthsViewMatrix","months","k","isCurrentMonth","isSelectedMonth","getMonthViewMetrix","daysOfMMonthViewMatrix","onPrevClick","useCallback","e","onNextClick","onDateClicked","cell","clickedDate","previouslySelected","startDate","setMinutes","value","formatted","undefined","stringkey","filter","dk","map","className","onClick","weekDay","weekend","role","onMouseEnter","disabled","tabIndex","App","val","setVal","JSON","stringify","style","display","justifyContent","padding","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAKaA,EAAoE,CAC/EC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,MAGQC,EAAiE,CAC5EP,EAAG,UACHC,EAAG,WACHC,EAAG,QACHC,EAAG,QACHC,EAAG,MACHC,EAAG,OACHC,EAAG,OACHE,EAAG,SACHC,EAAG,YACHC,EAAG,UACHC,GAAI,WACJC,GAAI,YCVC,SAASC,EAASC,GACvB,MAAM,GAAN,OAAUA,EAAKC,eAAf,OAA+BD,EAAKE,YAApC,OAAiDF,EAAKG,WAMjD,SAASC,EAASJ,EAAiBK,GACxC,GAAIA,EAAYC,KAAON,EAAKM,KAC1B,OAAO,EAGT,GAAID,EAAYC,OAASN,EAAKM,KAAM,CAClC,GAAID,EAAYE,MAAQP,EAAKO,MAC3B,OAAO,EAGT,GAAIF,EAAYE,QAAUP,EAAKO,OACzBF,EAAYG,UAAYR,EAAKQ,UAC/B,OAAO,EAKb,OAAO,EAMF,SAASC,EAAQT,GACtB,MAAuB,qBAATA,GAAiC,OAATA,IAAkBU,MAAM,IAAIC,KAAKX,GAAcY,WAMhF,SAASC,EAAYb,GAC1B,MAA6B,kBAAfA,EAAKO,OAA2C,kBAAdP,EAAKM,MAA+C,kBAAnBN,EAAKQ,UAMjF,SAASM,EAAQC,EAAkBC,GACxC,OAAOD,EAAMT,OAASU,EAAOV,MAAQS,EAAMR,QAAUS,EAAOT,OAASQ,EAAMP,YAAcQ,EAAOR,UAM3F,SAASS,EAAcC,EAAuBC,EAAqBnB,GAExE,OAAIkB,EAAWZ,MAAQN,EAAKM,MAAQN,EAAKM,MAAQa,EAASb,OAEpDY,EAAWZ,KAAON,EAAKM,MAAQN,EAAKM,KAAOa,EAASb,OAKpDY,EAAWZ,OAASa,EAASb,KAC3BY,EAAWX,OAASP,EAAKO,OAASP,EAAKO,OAASY,EAASZ,QAEvDW,EAAWX,MAAQP,EAAKO,OAASP,EAAKO,MAAQY,EAASZ,QAKvDW,EAAWX,QAAUY,EAASZ,MAE9BW,EAAWV,WAAaR,EAAKQ,WAC7BR,EAAKQ,WAAaW,EAASX,WAC3BR,EAAKO,QAAUY,EAASZ,MAQxBW,EAAWX,QAAUP,EAAKO,MACxBW,EAAWV,WAAaR,EAAKQ,UAO/BW,EAASZ,QAAUP,EAAKO,OACtBP,EAAKQ,WAAaW,EAASX,YAYjCU,EAAWZ,OAASN,EAAKM,KAEvBN,EAAKO,MAAQW,EAAWX,OAKxBP,EAAKO,QAAUW,EAAWX,OAExBP,EAAKQ,WAAaU,EAAWV,UASjCW,EAASb,OAASN,EAAKM,OAErBN,EAAKO,MAAQY,EAASZ,OAKtBP,EAAKO,QAAUY,EAASZ,OAEtBP,EAAKQ,WAAaW,EAASX,aAgBhC,SAASY,EAAYd,GAC1B,OAAQA,EAAO,IAAM,GAAKA,EAAO,MAAQ,GAAMA,EAAO,MAAQ,EAQzD,SAASe,EAAwBf,EAAcC,GAgBpD,MAf0C,CACxCrB,EAAG,GACHC,EAAGiC,EAAYd,GAAQ,GAAK,GAC5BlB,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHE,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,GAAI,GACJC,GAAI,IAGKS,GAmFb,SAASe,EACPC,EACAC,GAEA,IAAMC,EAAY,EAAID,EACtB,OACED,GAA4BE,EACxBF,EAA2BC,EAC3BD,EAA2BE,EAAY,EA4CxC,SAASC,EAAiBnB,GAC/B,OAAiB,IAAVA,EAAc,GAAOA,EAAQ,EAG/B,SAASoB,EAAapB,GAC3B,OAAiB,KAAVA,EAAe,EAAMA,EAAQ,EAG/B,SAASqB,EAAgBtB,GAC9B,OAAgB,IAATA,EAAa,EAAIA,EAAO,EAG1B,SAASuB,EAAYvB,GAC1B,OAAOA,EAAO,EAOT,SAASwB,EAAwBxB,GAGtC,OAAIA,EAAO,KAAO,EACT,IAAMA,EAAO,GAAK,GAAK,EAGzB,GAAKyB,QAAQzB,EAAO,IAAI0B,QAAQ,IAAM,EAsJxC,SAASC,EAAyBC,GA6EvC,IA7EyG,IAEvGC,EA+BED,EA/BFC,oBACAC,EA8BEF,EA9BFE,kBACAC,EA6BEH,EA7BFG,kBACAC,EA4BEJ,EA5BFI,mBACAC,EA2BEL,EA3BFK,gBACAC,EA0BEN,EA1BFM,gBACAC,EAyBEP,EAzBFO,kBACAC,EAwBER,EAxBFQ,mBACAC,EAuBET,EAvBFS,iBACAC,EAsBEV,EAtBFU,YACAC,EAqBEX,EArBFW,sBACAC,EAoBEZ,EApBFY,iBACAC,EAmBEb,EAnBFa,eACAC,EAkBEd,EAlBFc,gBACAC,EAiBEf,EAjBFe,wBACAC,EAgBEhB,EAhBFgB,mBACAC,EAeEjB,EAfFiB,kBACAC,EAcElB,EAdFkB,WACAC,EAaEnB,EAbFmB,YACA7B,EAYEU,EAZFV,eACA8B,EAWEpB,EAXFoB,aACAC,EAUErB,EAVFqB,cACAC,EASEtB,EATFsB,mBAxBsG,EAiCpGtB,EARFuB,qBAzBsG,WAiCpGvB,EAPFwB,mBA1BsG,WAiCpGxB,EANFyB,oBA3BsG,SA4BtGC,EAKE1B,EALF0B,QACAC,EAIE3B,EAJF2B,QACAC,EAGE5B,EAHF4B,SACAC,EAEE7B,EAFF6B,SACAC,EACE9B,EADF8B,WAGIC,EAAkC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAEvDC,EAxPR,SACE5D,EACAC,EACAiB,GAEA,IAAMxB,EAAO,IAAIW,KAIjB,OAHAX,EAAKmE,QAAQ,GACbnE,EAAKoE,SAAS7D,GACdP,EAAKqE,YAAY/D,GAzEnB,SAAiDgE,GAAsE,IAArC9C,EAAoC,uDAAnB,EACjG,OACE8C,GAA2B9C,EACvB8C,EAA0B9C,EAC1B,EAAIA,EAAiB,EAAI8C,EAsExBC,CAAwCvE,EAAKwE,SAAUhD,GA+O1BiD,CAClCrB,EACAC,EACA7B,GAGIkD,EAAW3B,EAEX4B,EA1HR,SAAkCzC,GAAyC,IACjEwB,EACNxB,EADMwB,YAAaC,EACnBzB,EADmByB,aAAcF,EACjCvB,EADiCuB,cAAemB,EAChD1C,EADgD0C,oBAAqBhB,EACrE1B,EADqE0B,QAASC,EAC9E3B,EAD8E2B,QAASC,EACvF5B,EADuF4B,SAAUC,EACjG7B,EADiG6B,SAG7F/D,EAAO,IAAIW,KACXkE,EAAa7E,EAAKG,UAClB2E,EAAc9E,EAAKC,cACnB8E,EAAe/E,EAAKE,WACpB8E,EAA0B,CAC9BzE,MAAOqD,EAAQ1D,WACfM,UAAWoD,EAAQzD,UACnBG,KAAMsD,EAAQ3D,eAEVgF,EAA0B,CAC9B1E,MAAOsD,EAAQ3D,WACfM,UAAWqD,EAAQ1D,UACnBG,KAAMuD,EAAQ5D,eAGhB,OAAO,SAA+BK,EAAcC,EAAqBP,EAAckF,GACrF,GAAIxB,EAAa,CACf,GAAIpD,EAAOwE,EACT,OAAO,EAGT,GAAIxE,IAASwE,GAAevE,EAAQwE,EAClC,OAAO,EAGT,GAAIzE,IAASwE,GAAevE,IAAUwE,GAAgB/E,EAAO6E,EAC3D,OAAO,EAGX,GAAIlB,GACErD,IAASwE,GAAevE,IAAUwE,GAAgB/E,IAAS6E,EAC7D,OAAO,EAGX,GAAIpB,EAAe,CACjB,GAAInD,EAAOwE,EACT,OAAO,EAGT,GAAIxE,IAASwE,GAAevE,EAAQwE,EAClC,OAAO,EAGT,GAAIzE,IAASwE,GAAevE,IAAUwE,GAAgB/E,EAAO6E,EAC3D,OAAO,EAIX,SAAIf,IACE1D,EAAS,CAAEE,OAAME,UAAWR,EAAMO,SAASyE,QAK7CjB,IACE3D,EAAS6E,EAAc,CAAE3E,OAAME,UAAWR,EAAMO,YAKnB,oBAAxBqE,GACFA,EAAoB,CACzBtE,KAAMA,EACNC,MAAOA,EACP2E,QAASA,EACTlF,KAAMA,KAqDkBmF,CAAyB,CACrDzB,cACAC,eACAF,gBACAmB,oBAAqBZ,EACrBJ,UACAC,UACAC,WACAC,aAGIqB,GAAa,IAAIzE,MAAOR,UACxBkF,GAAc,IAAI1E,MAAOT,WACzBoF,GAAa,IAAI3E,MAAOV,cACxBsF,EAA0BlE,EAAwB+B,EAAYC,GAE9DmC,EAA0C,IAAhBnC,EAC1BoC,GAAqC,KAAhBpC,EAErBqC,GAAuBrE,EAC3BmE,EAA0B5D,EAAgBwB,GAAcA,EACxD1B,EAAiB2B,IAIfsC,GAAM,EACNC,GAA6B,EAMxB5F,GAHsB0F,IAAwBxB,EAA8B,GAG7ClE,IAAQ0F,GAAsB1F,KAAQ,CACzD,IAAf4F,KACFA,GAAa,EACbD,MAEF,IAAME,GAAYnE,EAAiB2B,GAC7ByC,GAAWN,EAA0B5D,EAAgBwB,GAAcA,EAEnElC,GAAa,CAAEX,MAAO2C,EAAoB5C,KAAM6C,EAAmB3C,UAAWyC,GAC9E9B,GAAW,CAAEZ,MAAOuC,EAAkBxC,KAAM0C,EAAiBxC,UAAWqC,GACxEkD,GAAW,CAAExF,MAAOsF,GAAWvF,KAAMwF,GAAUtF,UAAWR,IAC1DgG,GAAgB,CACpBzF,MAAO+B,EACPhC,KAAM8B,EACN5B,UAAW6B,GAEP4D,GAAc,CAClB1F,MAAOoC,EACPrC,KAAMiC,EACN/B,UAAWgC,GAKbyB,EAAO0B,IAAKO,KAAK,CACflG,KAAMA,GACNO,MAAOsF,GACPM,mBAAmB,EACnBC,YAAWxD,IACPT,KACEtB,EAAYmF,MAAkBnF,EAAYoF,OACxC7F,EAAS6F,GAAaD,IACpB/E,EAAc+E,GAAeC,GAAaF,IAC1C9E,EAAcgF,GAAaD,GAAeD,KAE9C9E,EAAcC,GAAYC,GAAU4E,KAE1CM,eAAczD,IACVT,IACEtB,EAAYmF,KACVlF,EAAQkF,GAAeD,IAEzBjF,EAAQI,GAAY6E,KAE1BO,aAAY1D,KAAeT,GAA8BrB,EAAQK,GAAU4E,KAC3EzF,KAAMwF,GACNS,UAA6D,kBAA3C7B,EAAS8B,MAAK,SAACC,GAAD,OAAOA,IAAMb,MAC7Cc,UAAWpF,EAAkDsE,GAAYpE,GACzEmF,QAAS3G,KAASoF,GAAcS,KAAcR,GAAeS,KAAaR,EAC1EsB,WAAoB,IAARjB,GACZkB,UAAmB,IAARlB,GACXmB,aAA6B,IAAflB,GACdmB,aAA6B,IAAfnB,GACdoB,WAAYvE,IACNC,EAAmB3C,EAAS,IAAIY,KAAKoF,GAASzF,KAAMyF,GAASxF,MAAOwF,GAASvF,aAC/EqF,KAActC,GAAiBuC,KAAaxC,GAAgBtD,KAASwD,EAEzEQ,WAAYW,EACVmB,GACAD,GACA7F,GACAsB,EAAkDsE,GAAYpE,MAGlEoE,KAIF,IAAK,IAAI5F,GAAO,EAAGA,IAAQuF,EAAyBvF,KAAQ,CACvC,IAAf4F,KACFA,GAAa,EACbD,MAEF,IAAME,GAAYxC,EACZyC,GAAW1C,EACXuD,GAAU3G,KAASoF,GAAc/B,IAAgBgC,GAAejC,IAAekC,EAE/EpE,GAAa,CAAEX,MAAO2C,EAAoB5C,KAAM6C,EAAmB3C,UAAWyC,GAC9E9B,GAAW,CAAEZ,MAAOuC,EAAkBxC,KAAM0C,EAAiBxC,UAAWqC,GACxEkD,GAAW,CAAExF,MAAOsF,GAAWvF,KAAMwF,GAAUtF,UAAWR,IAC1DgG,GAAgB,CACpBzF,MAAO+B,EACPhC,KAAM8B,EACN5B,UAAW6B,GAEP4D,GAAc,CAClB1F,MAAOoC,EACPrC,KAAMiC,EACN/B,UAAWgC,GAGbyB,EAAO0B,IAAKO,KAAK,CACflG,KAAMA,GACNO,MAAOsF,GACPM,mBAAmB,EACnBC,YAAWxD,IACPT,KACEtB,EAAYmF,MAAkBnF,EAAYoF,OACxC7F,EAAS6F,GAAaD,IACpB/E,EAAc+E,GAAeC,GAAaF,IAC1C9E,EAAcgF,GAAaD,GAAeD,KAE9C9E,EAAcC,GAAYC,GAAU4E,KAE1CM,eAAczD,IACVT,IACEtB,EAAYmF,KACVlF,EAAQkF,GAAeD,IAEzBjF,EAAQI,GAAY6E,KAE1BO,aAAY1D,KAAeT,GAA8BrB,EAAQK,GAAU4E,KAC3EzF,KAAMwF,GACNY,UAAWpF,EAAkDsE,GAAYpE,GACzE+E,UAA6D,kBAA3C7B,EAAS8B,MAAK,SAACC,GAAD,OAAOA,IAAMb,MAC7Ce,QAASA,GACTC,WAAoB,IAARjB,GACZkB,UAAmB,IAARlB,GACXmB,aAA6B,IAAflB,GACdmB,aAA6B,IAAfnB,GACdoB,WAAYvE,IACNC,EAAmB3C,EAAS,IAAIY,KAAKoF,GAASzF,KAAMyF,GAASxF,MAAOwF,GAASvF,aAC/EqF,KAActC,GAAiBuC,KAAaxC,GAAgBtD,KAASwD,EACzEQ,WAAYW,EACVmB,GACAD,GACA7F,GACAsB,EAAkDsE,GAAYpE,MAGlEoE,KAMF,IAHA,IAAI5F,GAAO,EAGJiE,EAAO,GAAGgD,OAAS,GAAG,CACR,IAAfrB,KACFA,GAAa,EACbD,MAEF,IAAME,GAAYlE,EAAa0B,GACzByC,GAAWL,GAAqBrC,EAAa,EAAIA,EAEjDlC,GAAa,CAAEX,MAAO2C,EAAoB5C,KAAM6C,EAAmB3C,UAAWyC,GAC9E9B,GAAW,CAAEZ,MAAOuC,EAAkBxC,KAAM0C,EAAiBxC,UAAWqC,GACxEkD,GAAW,CAAExF,MAAOsF,GAAWvF,KAAMwF,GAAUtF,UAAWR,IAC1DgG,GAAgB,CACpBzF,MAAO+B,EACPhC,KAAM8B,EACN5B,UAAW6B,GAEP4D,GAAc,CAClB1F,MAAOoC,EACPrC,KAAMiC,EACN/B,UAAWgC,GAGbyB,EAAO0B,IAAKO,KAAK,CACflG,KAAMA,GACNO,MAAOsF,GACPM,mBAAmB,EACnBC,YAAWxD,IACPT,KACEtB,EAAYmF,MAAkBnF,EAAYoF,OACxC7F,EAAS6F,GAAaD,IACpB/E,EAAc+E,GAAeC,GAAaF,IAC1C9E,EAAcgF,GAAaD,GAAeD,KAE9C9E,EAAcC,GAAYC,GAAU4E,KAE1CM,eAAczD,IACVT,IACEtB,EAAYmF,KACVlF,EAAQkF,GAAeD,IAEzBjF,EAAQI,GAAY6E,KAE1BO,aAAY1D,KAAeT,GAA8BrB,EAAQK,GAAU4E,KAC3EzF,KAAMwF,GACNY,UAAWpF,EAAkDsE,GAAYpE,GACzE+E,UAA6D,kBAA3C7B,EAAS8B,MAAK,SAACC,GAAD,OAAOA,IAAMb,MAC7Ce,QAAS3G,KAASoF,GAAcS,KAAcR,GAAeS,KAAaR,EAC1EsB,WAAoB,IAARjB,GACZkB,UAAmB,IAARlB,GACXmB,aAA6B,IAAflB,GACdmB,aAA6B,IAAfnB,GACdoB,WAAYvE,IACNC,EAAmB3C,EAAS,IAAIY,KAAKoF,GAASzF,KAAMyF,GAASxF,MAAOwF,GAASvF,aAC/EqF,KAActC,GAAiBuC,KAAaxC,GAAgBtD,KAASwD,EACzEQ,WAAYW,EACVmB,GACAD,GACA7F,GACAsB,EAAkDsE,GAAYpE,MAGlEoE,KACA5F,KAGF,OAAOiE,E,WCrCMiD,MAvmBf,YAkBW,IAjBTlH,EAiBQ,EAjBRA,KACAmH,EAgBQ,EAhBRA,YACAzC,EAeQ,EAfRA,SACA0C,EAcQ,EAdRA,UACAC,EAaQ,EAbRA,gBACAC,EAYQ,EAZRA,QAYQ,IAXRC,mBAWQ,MAXM,EAWN,EAVRC,EAUQ,EAVRA,eACAC,EASQ,EATRA,eACAC,EAQQ,EARRA,iBACA1D,EAOQ,EAPRA,WACA2D,EAMQ,EANRA,SAMQ,IALRC,iBAKQ,MALI,IAKJ,MAJRC,cAIQ,MAJC,aAID,MAHRpE,qBAGQ,aAFRC,mBAEQ,aADRC,oBACQ,WAEoBmE,mBACE,mBAArBJ,IAAmCP,GAAcO,GADnDjF,EAFC,sBAOiBqF,mBAASP,GAA3B/F,EAPC,sBAUUsG,oBAAS,WACzB,OAAOrH,EAAQ+G,GAAkBA,EAAiB,IAAI7G,QADjDiD,EAVC,sBAaqBkE,oBAAS,WACpC,QAAOrH,EAAQ+G,MACX/G,EAAQgH,IACNrH,EACE,CACEG,MAAOiH,EAAetH,WACtBM,UAAWgH,EAAerH,UAC1BG,KAAMkH,EAAevH,eAEvB,CACEM,MAAOkH,EAAevH,WACtBM,UAAWiH,EAAetH,UAC1BG,KAAMmH,EAAexH,oBAZ1B8H,EAbC,sBAiCUD,oBAAS,WACzB,OAAOrH,EAAQgH,GAAkBA,EAAiB,IAAI9G,QADjDkD,EAjCC,sBAoCqBiE,oBAAS,WACpC,QAAOrH,EAAQgH,MACXhH,EAAQ+G,IACNpH,EACE,CACEG,MAAOiH,EAAetH,WACtBM,UAAWgH,EAAerH,UAC1BG,KAAMkH,EAAevH,eAEvB,CACEM,MAAOkH,EAAevH,WACtBM,UAAWiH,EAAetH,UAC1BG,KAAMmH,EAAexH,oBAZ1B+H,EApCC,sBAuDiBF,oBAAS,WAChC,OAAOG,MAAMC,QAAQxD,IAAaA,EAASyD,OAAM,SAACC,GAAD,MAAwB,kBAARA,KAC7D1D,EDwGD,SAAwBlD,GAC7B,OAAuB,IAAnBA,EACK,CAAC,EAAG,GACiB,IAAnBA,EACF,CAAC,EAAG,GACiB,IAAnBA,EACF,CAAC,EAAG,GACiB,IAAnBA,EACF,CAAC,EAAG,GACiB,IAAnBA,EACF,CAAC,EAAG,GACiB,IAAnBA,EACF,CAAC,EAAG,GAEJ,CAAC,EAAG,GCrHP6G,CAAe7G,MAHduB,EAvDC,uBA8DgB+E,mBAA6C,eA9D7D,qBA8DDQ,GA9DC,MA8DKC,GA9DL,SA+D8BT,mBACnCrH,EAAQ4G,GACL,IAAI1G,KAAK0G,GAAiBnH,YACzBiH,GAAe1G,EAAQT,GACxB,IAAIW,KAAKX,GAAME,YACf,IAAIS,MAAOT,YApET,qBA+DDmD,GA/DC,MA+DYmF,GA/DZ,SAsE4BV,mBAClCrH,EAAQ4G,GACJ,IAAI1G,KAAK0G,GAAiBpH,eACzBkH,GAAe1G,EAAQT,GACxB,IAAIW,KAAKX,GAAMC,eACf,IAAIU,MAAOV,eA3ET,qBAsEDmD,GAtEC,MAsEWqF,GAtEX,SA+E4CX,mBAA2C,IA/EvF,qBA+EDpF,GA/EC,MA+EmBgG,GA/EnB,SAkFkCZ,mBACvCrH,EAAQT,GAAQ,IAAIW,KAAKX,GAAME,YAAa,IAAIS,MAAOT,YAnFlD,qBAkFDqD,GAlFC,MAkFcoF,GAlFd,SAqFgCb,mBAASrH,EAAQT,GAAQ,IAAIW,KAAKX,GAAMG,WAAY,IAAIQ,MAAOR,WArF/F,qBAqFDyI,GArFC,MAqFaC,GArFb,SAsFgCf,mBACtCrH,EAAQT,GAAQ,IAAIW,KAAKX,GAAMC,eAAgB,IAAIU,MAAOV,eAvFpD,qBAsFDqD,GAtFC,MAsFawF,GAtFb,SA2F8ChB,oBAAS,GA3FvD,qBA2FD3F,GA3FC,MA2FoB4G,GA3FpB,SA8F4CjB,mBACjDrH,EAAQ2G,GAAa,IAAIzG,KAAKyG,GAAWlH,YAAa,IAAIS,MAAOT,YA/F5D,qBA8FDgD,GA9FC,MA8FmB8F,GA9FnB,SAiG0ClB,mBAChDrH,EAAQ2G,GAAa,IAAIzG,KAAKyG,GAAWjH,WAAY,IAAIQ,MAAOR,WAlG1D,qBAiGD8I,GAjGC,MAiGkBC,GAjGlB,SAoG0CpB,mBAChDrH,EAAQ2G,GAAa,IAAIzG,KAAKyG,GAAWnH,eAAgB,IAAIU,MAAOV,eArG9D,qBAoGDkD,GApGC,MAoGkBgG,GApGlB,SAyGwCrB,mBAC7CrH,EAAQ6G,GAAW,IAAI3G,KAAK2G,GAASpH,YAAa,IAAIS,MAAOT,YA1GxD,qBAyGD4C,GAzGC,MAyGiBsG,GAzGjB,SA4GsCtB,mBAC5CrH,EAAQ6G,GAAW,IAAI3G,KAAK2G,GAASnH,WAAY,IAAIQ,MAAOR,WA7GtD,qBA4GDkJ,GA5GC,MA4GgBC,GA5GhB,SA+GsCxB,mBAC5CrH,EAAQ6G,GAAW,IAAI3G,KAAK2G,GAASrH,eAAgB,IAAIU,MAAOV,eAhH1D,qBA+GD+C,GA/GC,MA+GgBuG,GA/GhB,SAoH4CzB,mBAAmC5E,IApH/E,qBAoHDZ,GApHC,MAoHmBkH,GApHnB,SAqH0C1B,mBAA6BmB,IArHvE,qBAqHD5G,GArHC,MAqHkBoH,GArHlB,SAsH0C3B,mBAA6B3E,IAtHvE,qBAsHDf,GAtHC,MAsHkBsH,GAtHlB,SAyHwC5B,mBAAmChF,IAzH3E,qBAyHDH,GAzHC,MAyHiBgH,GAzHjB,SA0HsC7B,mBAA6BuB,IA1HnE,qBA0HD7G,GA1HC,MA0HgBoH,GA1HhB,SA2HsC9B,mBAA6B9E,IA3HnE,qBA2HDT,GA3HC,MA2HgBsH,GA3HhB,SA6HwD/B,mBAAShG,EAAwBsB,KA7HzF,qBA6HD0G,GA7HC,MA6HyBC,GA7HzB,SAgI2CC,mBAAQ,WACzD,MD2GK,CAD0BC,EC1GLH,GD2GJG,EAAiB,IADpC,IAA4BA,ICzG9B,CAACH,KAlII,qBAgIDI,GAhIC,MAgIqBC,GAhIrB,MAqIFC,GAAYJ,mBAAQ,WACxB,OD5EG,WAA2G,IAArDxI,EAAoD,uDAAnC,EAK5E,OAAO6I,OAAOC,KAAKrL,GAChBsL,MAAM/I,EAAgB,GACtBgJ,OAAOH,OAAOC,KAAKrL,GAAmCsL,MAAM,EAAG/I,IAC/DiJ,QAAO,SAACC,EAAKC,EAAcC,GAG1B,OADAF,EAAI3I,OAAO6I,IAA4B3L,EAAkC8C,OAAO4I,IACzED,IACN,ICgEIG,CAA6CrJ,KACnD,CAACA,IAGEsJ,GAAYd,mBAAQ,WACxB,OD+GG,SAAwCnC,GAC7C,IAAMkD,EAAkD,CAAEC,MAAM,EAAMC,IAAI,EAAMC,IAAI,GAC9EC,EAAQtD,EAAOuD,MAAM,KAC3B,GAAqB,IAAjBD,EAAMlE,OACR,MAAM,IAAIoE,MAAM,2BAElB,IAAKF,EAAMhD,OAAM,SAACmD,GAAD,OAAUP,EAASO,MAClC,MAAM,IAAID,MAAM,mCAElB,OAAO,SAAC/K,EAAcC,EAAeP,EAAc4H,GACjD,IAAI2D,EAAS,GAeb,OAdAJ,EAAMK,SAAQ,SAACF,EAAMV,GACN,SAATU,IACFC,GAAUjL,GAEC,OAATgL,IACFC,GAAUhL,GAEC,OAAT+K,IACFC,GAAUvL,GAEE,IAAV4K,IACFW,GAAU3D,MAGP2D,GCxIAE,CAA+B5D,KACrC,CAACA,IAEJ6D,qBAAU,WACR3B,GAA4BjI,EAAwBsB,OACnD,CAACA,GAAY2G,KAGhB,IAAM4B,GAAkB3B,mBAAsB,WAC5C,OD2FG,SAA4BC,EAAwB3G,GACzD,IAAMsI,EAAQ3D,MAAM4D,KAAK,CAAE5E,OAAQ,KAAM,SAAC6E,EAAGlB,GAC3C,MAAO,CACLtK,KAAM2J,EAAiBW,EACvBmB,eAAe,IAAIpL,MAAOV,gBAAkBgK,EAAiBW,EAC7DoB,eAAgB1I,IAAiB2G,EAAiBW,MAGtD,MAAO,CAACgB,EAAMrB,MAAM,EAAG,GAAIqB,EAAMrB,MAAM,EAAG,IAAKqB,EAAMrB,MAAM,GAAI,IAAKqB,EAAMrB,MAAM,GAAI,KCnG3E0B,CAAmBnC,GAA0BxG,MACnD,CAACwG,GAA0BxG,KAExB4I,GAAmBlC,mBAAuB,WAC9C,OD6DG,SAA4BzG,GACjC,IAAM4I,EAASlE,MAAM4D,KAAK,CAAE5E,OAAQ,KAAM,SAAC6E,EAAGM,GAC5C,MAAO,CACL7L,MAAO6L,EACPC,gBAAgB,IAAI1L,MAAOT,aAAekM,EAC1CE,gBAAiB/I,IAAkB6I,MAGvC,MAAO,CAACD,EAAO5B,MAAM,EAAG,GAAI4B,EAAO5B,MAAM,EAAG,GAAI4B,EAAO5B,MAAM,EAAG,GAAI4B,EAAO5B,MAAM,EAAG,KCrE3EgC,CAAmBhJ,MACzB,CAACA,KAEEiJ,GAAyBxC,mBAAQ,WACrC,OAAO/H,EAAyB,CAC9BM,mBACAG,sBACAF,mBACAO,iBACAJ,oBACAP,qBACAC,qBACAC,sBACAM,cAAeuE,EACfhF,uBACAa,mBACAP,oBACAK,oBACAD,sBAAuBwG,GACvBpG,wBAAyBgG,GACzB9F,qBACAD,sBACAE,cACAC,eACA7B,iBACA8B,gBACAC,iBACAC,mBAAoBoF,GACpBnF,gBACAC,cACAC,eACAK,aACAJ,QAASA,EACTC,QAASA,EACTC,SAAUiE,EACVhE,SAAUiE,MAEX,CACDzF,GACAG,GACAF,GACAO,EACAJ,GACAP,GACAC,GACAC,GACA6E,EACAhF,GACAa,GACAP,EACAK,GACAuG,GACAJ,GACA9F,GACAD,GACAE,GACAC,GACA7B,EACA8B,GACAC,GACAqF,GACAnF,EACAC,EACAC,EACAK,EACAJ,EACAC,EACAkE,EACAC,IAIIyE,GAAcC,uBAClB,SAACC,GAEG,IDHqC1C,ECE1B,gBAAT3B,KAC8C,IAAhBjF,IAE9BoF,GAAc7G,EAAgBwB,KAEhCoF,GAAe9G,EAAiB2B,MAErB,UAATiF,IACFyB,GDTiB,KADoBE,ECUoBH,IDRtD,EAEFhI,EAAwBmI,EAAiB,ICQ/B,WAAT3B,IACFG,GAA6B,IAAfrF,GAAmBA,GAAa,EAAI,KAGtD,CACEoF,GACAnF,GACAoF,GACArF,GACAkF,GACAyB,GACAD,KAIE8C,GAAcF,uBAClB,SAACC,GACc,gBAATrE,KACyC,KAAhBjF,IAEzBoF,GAAc5G,EAAYuB,KAE5BoF,GAAe7G,EAAa0B,MAEjB,UAATiF,IACFyB,GD7BCjI,EC6BoDgI,GD7BX,KCgC/B,WAATxB,IACFG,GAAc5G,EAAYuB,OAG9B,CACEoF,GACAnF,GACAoF,GACArF,GACAkF,GACAyB,GACAD,KAIE+C,GAAgBH,uBACpB,SAACI,GACC,GAAI3F,EACF,GAAIhF,GAAqB,CAGvB,IAAM4K,EAAc,CAAExM,MAAOuM,EAAKvM,MAAOC,UAAWsM,EAAK9M,KAAMM,KAAMwM,EAAKxM,MACpE0M,EAAqB,CACzBzM,MAAO+B,GACP9B,UAAW6B,GACX/B,KAAM8B,IAGR,GAAIhC,EAAS4M,EAAoBD,GAAc,CAC7C5D,GAAqB4D,EAAYzM,MACjC0I,GAAsB+D,EAAYxM,OAClC2I,GAAqB6D,EAAYvM,WAEjC+I,GAAmByD,EAAmB1M,MACtC8I,GAAoB4D,EAAmBzM,OACvC+I,GAAmB0D,EAAmBxM,WAEtC,IAAMyM,EAAY,IAAItM,KACtBsM,EAAU9I,QAAQ4I,EAAYvM,WAC9ByM,EAAU5I,YAAY0I,EAAYzM,MAClC2M,EAAU7I,SAAS2I,EAAYxM,OAC/B0M,EAAUC,WAAW,EAAG,EAAG,GAE3B,IAAM5F,EAAU,IAAI3G,KACpB2G,EAAQnD,QAAQ6I,EAAmBxM,WACnC8G,EAAQjD,YAAY2I,EAAmB1M,MACvCgH,EAAQlD,SAAS4I,EAAmBzM,OACpC+G,EAAQ4F,WAAW,EAAG,EAAG,GAEzBvF,GACEA,EAAS,CACP,CACEwF,MAAOF,EACP3M,KAAMyM,EAAYzM,KAClBC,MAAOwM,EAAYxM,MACnBP,KAAM+M,EAAYvM,UAClB4M,UAAWtC,GAAUiC,EAAYzM,KAAMyM,EAAYxM,MAAQ,EAAGwM,EAAYvM,UAAWoH,IAEvF,CACEuF,MAAO7F,EACPhH,KAAM0M,EAAmB1M,KACzBC,MAAOyM,EAAmBzM,MAC1BP,KAAMgN,EAAmBxM,UACzB4M,UAAWtC,GACTkC,EAAmB1M,KACnB0M,EAAmBzM,MAAQ,EAC3ByM,EAAmBxM,UACnBoH,UAIH,CACLuB,GAAqB6D,EAAmB1M,MACxC0I,GAAsBgE,EAAmBzM,OACzC2I,GAAqB8D,EAAmBxM,WAExC+I,GAAmBwD,EAAYzM,MAC/B8I,GAAoB2D,EAAYxM,OAChC+I,GAAmByD,EAAYvM,WAE/B,IAAMyM,EAAY,IAAItM,KACtBsM,EAAU9I,QAAQ6I,EAAmBxM,WACrCyM,EAAU5I,YAAY2I,EAAmB1M,MACzC2M,EAAU7I,SAAS4I,EAAmBxM,WACtCyM,EAAUC,WAAW,EAAG,EAAG,GAE3B,IAAM5F,EAAU,IAAI3G,KACpB2G,EAAQnD,QAAQ4I,EAAYvM,WAC5B8G,EAAQjD,YAAY0I,EAAYzM,MAChCgH,EAAQlD,SAAS2I,EAAYxM,OAC7B+G,EAAQ4F,WAAW,EAAG,EAAG,GAEzBvF,GACEA,EAAS,CACP,CACEwF,MAAOF,EACP3M,KAAM0M,EAAmB1M,KACzBC,MAAOyM,EAAmBzM,MAC1BP,KAAMgN,EAAmBxM,UACzB4M,UAAWtC,GACTkC,EAAmB1M,KACnB0M,EAAmBzM,MAAQ,EAC3ByM,EAAmBxM,UACnBoH,IAGJ,CACEuF,MAAO7F,EACPhH,KAAMyM,EAAYzM,KAClBC,MAAOwM,EAAYxM,MACnBP,KAAM+M,EAAYvM,UAClB4M,UAAWtC,GAAUiC,EAAYzM,KAAMyM,EAAYxM,MAAQ,EAAGwM,EAAYvM,UAAWoH,MAK7FiC,QAAmBwD,GACnB1D,QAAoB0D,GACpBzD,QAAmByD,GAEnBtE,IAAuB,QAGvBW,GAAqBoD,EAAKxM,MAC1BkJ,GAAsBsD,EAAKvM,OAC3BkJ,GAAqBqD,EAAK9M,MAE1B6J,QAAmBwD,GACnB1D,QAAoB0D,GACpBzD,QAAmByD,GAEnBtE,IAAuB,QAEpB,GAAItG,EAAmB,CAC5B,IAAMzC,EAAO,IAAIW,KAAKmM,EAAKxM,KAAMwM,EAAKvM,MAAOuM,EAAK9M,MAC5CsN,EAAYvN,EAASC,GAErB0C,GAAmB4K,GACvB5E,GAAsB,2BACjBhG,IADgB,kBAElB4K,OAAYD,KAGf3E,GAAsB,2BACjBhG,IADgB,kBAElB4K,EAAYtN,KAIjB2H,GACEA,EACE0C,OAAOC,KAAK5H,IACT6K,QAAO,SAACC,GAAD,QAAU9K,GAAmB8K,MACpCC,KAAI,SAACD,GAAD,MAAS,CACZL,MAAOzK,GAAmB8K,GAC1BlN,KAAOoC,GAAmB8K,GAAavN,cACvCM,MAAQmC,GAAmB8K,GAAatN,WACxCF,KAAO0C,GAAmB8K,GAAarN,UACvCiN,UAAWtC,GACRpI,GAAmB8K,GAAavN,cAChCyC,GAAmB8K,GAAatN,WAAa,EAC7CwC,GAAmB8K,GAAarN,UACjCyH,YAIL,CACLe,GAAiBmE,EAAKvM,OACtBuI,GAAgBgE,EAAKxM,MACrBuI,GAAgBiE,EAAK9M,MACrB,IAAMA,EAAO,IAAIW,KACjBX,EAAKqE,YAAYyI,EAAKxM,MACtBN,EAAKoE,SAAS0I,EAAKvM,OACnBP,EAAKmE,QAAQ2I,EAAK9M,MAClBA,EAAKkN,WAAW,EAAG,EAAG,GAEtBvF,GACEA,EAAS,CACPwF,MAAOnN,EACPM,KAAMwM,EAAKxM,KACXC,MAAOuM,EAAKvM,MACZP,KAAM8M,EAAK9M,KACXoN,UAAWtC,GAAUgC,EAAKxM,KAAMwM,EAAKvM,MAAQ,EAAGuM,EAAK9M,KAAM4H,KAIjEY,GAAesE,EAAKvM,OACpBkI,GAAcqE,EAAKxM,QAErB,CACE6G,EACA1E,EACAN,GACAG,GACAD,GACAD,GACAuF,EACAmD,GACAlD,EACAlF,KAIJ,OACE,0BAASgL,UAAU,MAAnB,UACE,yBAAQA,UAAU,aAAlB,UACE,wBAAQA,UAAU,qCAAqCC,QAASlB,GAAhE,oBAGU,gBAATnE,GACC,yBAAQoF,UAAU,kDAAkDC,QAAS,kBAAMpF,GAAQ,UAA3F,UACE,8BACE,+BAAO9I,EAAiC4D,QAE1C,8BACE,+BAAOD,UAGA,WAATkF,GACF,wBAAQoF,UAAU,2CAAlB,SACE,qBAAKC,QAAS,kBAAMpF,GAAQ,UAA5B,SACE,+BAAOnF,SAIX,wBAAQsK,UAAU,0CAA0CC,QAAS,kBAAMpF,GAAQ,gBAAnF,SACE,8BACE,iCACG2B,GADH,IAC0BC,UAKhC,wBAAQuD,UAAU,qCAAqCC,QAASf,GAAhE,uBAIF,uBAAMc,UAAU,WAAhB,UACY,WAATpF,IACC,qBAAKoF,UAAU,kBAAf,SACGxB,GAAiBuB,KAAI,SAAC9H,EAAKiF,GAAN,OACpB,qBAAK8C,UAAU,eAAf,SACG/H,EAAI8H,KAAI,SAACX,GAAD,OACP,qBAAKY,UAAS,uBAAkBZ,EAAKT,eAAiB,kBAAoB,IAA1E,SACE,wBACEsB,QAAS,WACPnF,GAAesE,EAAKvM,OACpBgI,GAAQ,gBAHZ,SAKG9I,EAAiCqN,EAAKvM,UAN0CuM,EAAKvM,WAF3DqK,QAgB/B,UAATtC,IACC,qBAAKoF,UAAU,iBAAf,SACG/B,GAAgB8B,KAAI,SAAC9H,EAAKiF,GAAN,OACnB,qBAAK8C,UAAU,eAAf,SACG/H,EAAI8H,KAAI,SAACX,GAAD,OACP,qBAAKY,UAAS,uBAAkBZ,EAAKf,cAAgB,iBAAmB,IAAxE,SACE,wBACE4B,QAAS,WACPlF,GAAcqE,EAAKxM,MACnBiI,GAAQ,WAHZ,SAKGuE,EAAKxM,QANyEwM,EAAKxM,UAFzDsK,QAgB/B,gBAATtC,IACC,qCACE,oBAAIoF,UAAU,oBAAd,SACGrD,OAAOC,KAAKF,IAAWqD,KAAI,SAACG,GAAD,OAC1B,oBAEEF,UAAS,gCACkE,kBAAlE3K,EAAeyD,MAAK,SAACqH,GAAD,OAAaA,IAAY9L,OAAO6L,MAAyB,YAAc,IAHtG,SAKE,+BAAOxD,GAAUrI,OAAO6L,OAJnBA,QAQX,qBAAKF,UAAU,yBAAyBI,KAAK,OAA7C,SACGtB,GAAuBiB,KAAI,SAAC9H,EAAKiF,GAAN,OAC1B,qBAAK8C,UAAU,eAAf,SACG/H,EAAI8H,KAAI,SAACX,GAAD,OACP,qBACEiB,aAAc,WACR5G,GACEhF,KACF0H,GAAmBiD,EAAKxM,MACxBqJ,GAAoBmD,EAAKvM,OACzBqJ,GAAmBkD,EAAK9M,QAK9B0N,UAAS,uBAAkBZ,EAAK3G,kBAAoB,cAAgB,IAA3D,OACP2G,EAAKvG,UAAY,YAAc,IADxB,OAENuG,EAAKnG,QAAU,aAAe,IAFxB,OAE6BmG,EAAKlG,WAAa,UAAY,IAF3D,OAGPkG,EAAKjG,UAAY,UAAY,IAHtB,OAINiG,EAAKhG,aAAe,UAAY,IAJ1B,OAI+BgG,EAAK/F,aAAe,UAAY,IAJ/D,OAKP+F,EAAK9F,aAAeG,EAAc,gBAAkB,IAL7C,OAMN2F,EAAK9I,WAAa,gBAAkB,IAN9B,OAMmC8I,EAAK1G,UAAY,gBAAkB,IANtE,OAOP0G,EAAKzG,aAAe,mBAAqB,IAPlC,OAQNyG,EAAKxG,WAAa,iBAAmB,IAR/B,OAQoCnE,GAAsB,kBAAoB,IAnBzF,SAoBE,qBAAKuL,UAAU,sBAAf,SACE,wBACEM,SAAUlB,EAAK9I,WACfiK,SAAUnB,EAAK9I,YAAc,EAAI,EACjC2J,QAAS,kBAAMd,GAAcC,IAH/B,SAIGA,EAAK9M,UAfL8M,EAAK9M,UAZmB4K,kBC1mBpCsD,MA3Ef,WAAgB,IAAD,EACSpG,mBAAS,MADlB,mBACNqG,EADM,KACDC,EADC,KAEPzG,EAAW+E,uBACf,SAACS,GACCiB,EAAOC,KAAKC,UAAUnB,EAAO,KAAM,MAErC,CAACiB,IAEGxK,EAAU,IAAIjD,KAAK,KAAM,EAAG,IAC5BkD,EAAU,IAAIlD,KAAK,KAAM,EAAG,IAClC,OACE,sBAAK4N,MAAO,CAAEC,QAAS,OAAQC,eAAgB,gBAAiBC,QAAS,OAAzE,UACE,0BAASH,MAAO,CAAEI,UAAW,UAA7B,UACE,8BACE,qDAEF,cAAC,EAAD,CAAUjH,kBAAgB,EAAC/D,cAAY,EAACiE,UAAU,IAAIC,OAAO,aAAaF,SAAUA,IACpF,8BACE,6DAEF,cAAC,EAAD,CACEN,gBAAiB,IAAI1G,KAAK,KAAM,EAAG,IACnCwG,aAAW,EACXK,eAAgB5D,EAChB6D,eAAgB5D,EAChBF,cAAY,EACZiE,UAAU,IACVC,OAAO,aACPF,SAAUA,EAEV3H,KAAM,IAAIW,KAAK,KAAM,EAAG,MAE1B,8BACE,gDAEF,cAAC,EAAD,CACEwG,aAAW,EACXC,UAAW,IAAIzG,KAAK,KAAM,EAAG,GAC7B2G,QAAS,IAAI3G,KAAK,KAAM,EAAG,IAC3BiH,UAAU,IACVC,OAAO,aACPF,SAAUA,EAEV3H,KAAM,IAAIW,KAAK,KAAM,EAAG,MAE1B,8BACE,4DAEF,cAAC,EAAD,CAAU4G,YAAa,EAAGI,SAAUA,IACpC,8BACE,kDAEF,cAAC,EAAD,CAAUjD,SAAU,CAAC,EAAG,EAAG,GAAIiD,SAAUA,IACzC,8BACE,iDAEF,cAAC,EAAD,CAAUjE,aAAW,EAACiE,SAAUA,IAChC,8BACE,kDAEF,cAAC,EAAD,CAAUhE,cAAY,EAACD,aAAW,EAACiE,SAAUA,IAC7C,8BACE,mDAEF,cAAC,EAAD,CAAUlE,eAAa,EAACkE,SAAUA,IAClC,8BACE,2CAEF,cAAC,EAAD,CAAUA,SAAUA,OAEtB,8BAAMwG,QC5DGS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d8ee86f5.chunk.js","sourcesContent":["import type { MonthIndices, WeekdayIndices } from './types';\n\n/**\n * This weekday index-to-label map is what is used by the Date object\n */\nexport const NATIVE_INDEX_TO_LABEL_WEEKDAY_MAP: Record<WeekdayIndices, string> = {\n  0: 'Su',\n  1: 'Mo',\n  2: 'Tu',\n  3: 'We',\n  4: 'Th',\n  5: 'Fr',\n  6: 'Sa',\n};\n\nexport const NATIVE_INDEX_TO_LABEL_MONTHS_MAP: Record<MonthIndices, string> = {\n  0: 'January',\n  1: 'February',\n  2: 'March',\n  3: 'April',\n  4: 'May',\n  5: 'June',\n  6: 'July',\n  7: 'August',\n  8: 'September',\n  9: 'October',\n  10: 'November',\n  11: 'December',\n};\n","/* eslint-disable no-loop-func */\nimport type {\n  MonthIndices,\n  WeekdayIndices,\n  MonthCell,\n  YearCell,\n  DateParts,\n  DayOfMonthCell,\n  GetDaysOfMonthViewMetrixParams,\n  CheckIfDateIsDisabledHOFParams,\n} from './types';\n\nimport { NATIVE_INDEX_TO_LABEL_WEEKDAY_MAP } from './constants';\n\n/**\n * Converts a date to string\n */\nexport function toString(date: Date) {\n  return `${date.getFullYear()}${date.getMonth()}${date.getDate()}`;\n}\n\n/**\n * Returns true if toCheck date is before the date\n */\nexport function isBefore(date: DateParts, toCheckDate: DateParts): boolean {\n  if (toCheckDate.year < date.year) {\n    return true;\n  }\n\n  if (toCheckDate.year === date.year) {\n    if (toCheckDate.month < date.month) {\n      return true;\n    }\n\n    if (toCheckDate.month === date.month) {\n      if (toCheckDate.monthDate < date.monthDate) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the given date is valid\n */\nexport function isValid(date: unknown): date is Date {\n  return typeof date !== 'undefined' && date !== null && !isNaN(new Date(date as Date).getTime());\n}\n\n/**\n * Returns true if the given date part is valid\n */\nexport function isPartValid(date: Partial<DateParts>): date is Required<DateParts> {\n  return typeof date.month === 'number' && typeof date.year === 'number' && typeof date.monthDate === 'number';\n}\n\n/**\n * Returns true if the given dates are equal\n */\nexport function isEqual(first: DateParts, second: DateParts): boolean {\n  return first.year === second.year && first.month === second.month && first.monthDate === second.monthDate;\n}\n\n/**\n * Returns true if the given date falls inside the range\n */\nexport function isPartOfRange(rangeStart: DateParts, rangeEnd: DateParts, date: DateParts): boolean {\n  // if date lies in between the year\n  if (rangeStart.year <= date.year && date.year <= rangeEnd.year) {\n    // if year is in-between range year start and year end\n    if (rangeStart.year < date.year && date.year < rangeEnd.year) {\n      return true;\n    }\n\n    // if start year and end year are same\n    if (rangeStart.year === rangeEnd.year) {\n      if (rangeStart.month <= date.month && date.month <= rangeEnd.month) {\n        // if month is in-between month start and and moth end\n        if (rangeStart.month < date.month && date.month < rangeEnd.month) {\n          return true;\n        }\n\n        // if month start and month end are same\n        if (rangeStart.month === rangeEnd.month) {\n          if (\n            rangeStart.monthDate <= date.monthDate &&\n            date.monthDate <= rangeEnd.monthDate &&\n            date.month === rangeEnd.month\n          ) {\n            return true;\n          }\n          return false;\n        }\n\n        // if date is in start month\n        if (rangeStart.month === date.month) {\n          if (rangeStart.monthDate <= date.monthDate) {\n            return true;\n          }\n          return false;\n        }\n\n        // if date is in end month\n        if (rangeEnd.month === date.month) {\n          if (date.monthDate <= rangeEnd.monthDate) {\n            return true;\n          }\n          return false;\n        }\n\n        return false;\n      }\n      return false;\n    }\n\n    // if year is same as start year\n    if (rangeStart.year === date.year) {\n      // if month is greater than start month\n      if (date.month > rangeStart.month) {\n        return true;\n      }\n\n      // if month is same as start month\n      if (date.month === rangeStart.month) {\n        // if date is greater than range start date\n        if (date.monthDate >= rangeStart.monthDate) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    // if year is same as end year\n    if (rangeEnd.year === date.year) {\n      // if month is smaller than end month\n      if (date.month < rangeEnd.month) {\n        return true;\n      }\n\n      // if month is same as end month\n      if (date.month === rangeEnd.month) {\n        // if date is smaller than range end date\n        if (date.monthDate <= rangeEnd.monthDate) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    return false;\n  }\n  return false;\n}\n\n/**\n * Returns true if the given year is a leap year.\n * @param {number} year\n */\nexport function isALeapYear(year: number) {\n  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n}\n\n/**\n * Returns the number of days in the given month of the given year.\n * @param {number} year\n * @param {number} month\n */\nexport function getNumberOfDaysInAMonth(year: number, month: MonthIndices) {\n  const map: Record<MonthIndices, number> = {\n    0: 31,\n    1: isALeapYear(year) ? 29 : 28,\n    2: 31,\n    3: 30,\n    4: 31,\n    5: 30,\n    6: 31,\n    7: 31,\n    8: 30,\n    9: 31,\n    10: 30,\n    11: 31,\n  };\n\n  return map[month];\n}\n\n// WEEKDAY UTILS\n\n/**\n * Creates and return a new weekday index-label map as per the **start**\n * parameter. By default this will return the same weekday index-label map\n * used by the Date object.\n * 0 means Sun - if we follow the native Date convention\n * Now if someone wants to start their week from Mon, then 0 would mean Monday which is different from\n * the convention used by the Date methods.\n * @param startOfTheWeek index of the day to be considered as start of the week\n */\nexport function getWeekDaysIndexToLabelMapForAStartOfTheWeek(startOfTheWeek = 0): Record<WeekdayIndices, string> {\n  // we break [0,1,2,3,4,5,6] in two parts, startOfTheWeek = 3\n  // [startOfTheWeek,4,5,6] and [0,1,2] and join them with their labels\n  // this is just to re-order the label in the **correct order**\n  // i.e 0 becomes Wed although in native order 0 is Sunday\n  return Object.keys(NATIVE_INDEX_TO_LABEL_WEEKDAY_MAP)\n    .slice(startOfTheWeek, 7)\n    .concat(Object.keys(NATIVE_INDEX_TO_LABEL_WEEKDAY_MAP).slice(0, startOfTheWeek))\n    .reduce((acc, weekdayIndex, index) => {\n      // acc[0] = DEFAULT_WEEKDAY_INDEX[3]\n      acc[Number(index) as WeekdayIndices] = NATIVE_INDEX_TO_LABEL_WEEKDAY_MAP[Number(weekdayIndex) as WeekdayIndices];\n      return acc;\n    }, {} as Record<WeekdayIndices, string>);\n}\n\n/**\n * So if the Date object says that some date has 3 day-of-the-week. No this 3 means Wednesday as per the native index for week days.\n * But if a calendar starts from Monday, then wednesday will not be at 3 but it will be at some other index which is according to a different index-label map.\n * So this method returns that index for wednesday.\n * @param weekdayAsPerNativeIndex day-of-the-week as per the Date object\n * @param startOfTheWeek index of the day to be considered as start of the week\n */\nfunction getInfluencedWeekDayIndexAsPerAStartDay(weekdayAsPerNativeIndex: number, startOfTheWeek = 0): WeekdayIndices {\n  return (\n    weekdayAsPerNativeIndex >= startOfTheWeek\n      ? weekdayAsPerNativeIndex - startOfTheWeek\n      : 6 - startOfTheWeek + 1 + weekdayAsPerNativeIndex\n  ) as WeekdayIndices;\n}\n\n// {\n//   0: 'Mo',\n//   1: 'Tu',\n//   2: 'We',\n//   3: 'Th',\n//   4: 'Fr',\n//   5: 'Sa',\n//   6: 'Su'\n// };\n// start = 1\n// 6 - 1 = 5\n// influencedIndex = 3 (Thu)\n// 3 <= 5 so 3 + 1 = 4 (Thu) (native)\n// influencedIndex = 2 (Wed)\n// 2 <= 5 so 2 + 1 = 3 (Wed) (native)\n// influencedIndex = 5 (Sa)\n// 5 <= 5 so 5 + 1 = 6 (Sa) (native)\n// influencedIndex = 6 (Su)\n// 6 > 5 so ((6 - 5) - 1) = 0 (su) (native)\n\n// {\n//   0: 'Tu',\n//   1: 'We',\n//   2: 'Th',\n//   3: 'Fr',\n//   4: 'Sa',\n//   5: 'Su',\n//   6: 'Mo'\n// };\n// start = 2\n// 6 - 2 = 4\n// influencedIndex = 3 (Fr)\n// 3 <= 4 so 3 + 2 = 5 (Fr) (native)\n// influencedIndex = 2 (Th)\n// 2 <= 4 so 2 + 2 = 4 (Th) (native)\n// influencedIndex = 5 (Su)\n// 5 > 4 so ((5 - 4) - 1) = 0 (Su) (native)\n// influencedIndex = 6 (Mo)\n// 6 > 4 so ((6 - 4) - 1) = 1 (Mo) (native)\nfunction getNativeWeekDayIndexFromAStartDayInfluencedIndex(\n  weekdayAsPerChangedIndex: number,\n  startOfTheWeek: number\n): WeekdayIndices {\n  const diversion = 6 - startOfTheWeek;\n  return (\n    weekdayAsPerChangedIndex <= diversion\n      ? weekdayAsPerChangedIndex + startOfTheWeek\n      : weekdayAsPerChangedIndex - diversion - 1\n  ) as WeekdayIndices;\n}\n\n/**\n * Gives the index of day-of-the-week on the 1st of the provided month-year.\n * @param year Specify a year\n * @param month Specify a month\n * @param startOfTheWeek index of the day to be considered as start of the week\n */\nfunction getInfluencedWeekDayIndexOnFirstDateOfMonth(\n  year: number,\n  month: number,\n  startOfTheWeek: number\n): WeekdayIndices {\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  return getInfluencedWeekDayIndexAsPerAStartDay(date.getDay(), startOfTheWeek) as WeekdayIndices;\n}\n\n/**\n * Returns info about what indexes are weekend\n * @param startOfTheWeek index of the day to be considered as start of the week\n */\nexport function getWeekendInfo(startOfTheWeek: number): WeekdayIndices[] {\n  if (startOfTheWeek === 0) {\n    return [6, 0];\n  } else if (startOfTheWeek === 1) {\n    return [5, 6];\n  } else if (startOfTheWeek === 2) {\n    return [4, 5];\n  } else if (startOfTheWeek === 3) {\n    return [3, 4];\n  } else if (startOfTheWeek === 4) {\n    return [2, 3];\n  } else if (startOfTheWeek === 5) {\n    return [1, 2];\n  } else {\n    return [0, 1];\n  }\n}\n\nexport function getPreviousMonth(month: MonthIndices): MonthIndices {\n  return month === 0 ? 11 : ((month - 1) as MonthIndices);\n}\n\nexport function getNextMonth(month: MonthIndices): MonthIndices {\n  return month === 11 ? 0 : ((month + 1) as MonthIndices);\n}\n\nexport function getPreviousYear(year: number): number {\n  return year === 1 ? 1 : year - 1;\n}\n\nexport function getNextYear(year: number): number {\n  return year + 1;\n}\n\n// 1 - 20 (20 years in one range block)\n// 21 - 40\n// so if you provide 3 then the start of raange for 3 would be\n// 1 since it belongs to the 1-20 year range.\nexport function getStartOfRangeForAYear(year: number) {\n  // last cell will always be a perfect multiple of 20\n  // take 2016 as an example\n  if (year % 20 === 0) {\n    return 20 * (year / 20 - 1) + 1;\n  }\n  // logic derived from a few examples like 2021, 1981, 1973\n  return 20 * Number((year / 20).toFixed(0)) + 1;\n}\n\n/**\n * Returns matrix for the month select view.\n * @param selectedMonth\n */\nexport function getMonthViewMetrix(selectedMonth: number): Array<MonthCell>[] {\n  const months = Array.from({ length: 12 }, (v, k) => {\n    return {\n      month: k as MonthIndices,\n      isCurrentMonth: new Date().getMonth() === k,\n      isSelectedMonth: selectedMonth === k,\n    };\n  });\n  return [months.slice(0, 3), months.slice(3, 6), months.slice(6, 9), months.slice(9, 12)];\n}\n\nexport function getPreviousRangeStartingYear(rangeStartYear: number) {\n  if (rangeStartYear === 1) {\n    return 1;\n  }\n  return getStartOfRangeForAYear(rangeStartYear - 1);\n}\n\nexport function getNextRangeStartingYear(rangeStartYear: number) {\n  return getStartOfRangeForAYear(rangeStartYear + 20);\n}\n\nexport function getYearRangeLimits(rangeStartYear: number) {\n  return [rangeStartYear, rangeStartYear + 19];\n}\n\nexport function getYearsViewMetrix(rangeStartYear: number, selectedYear: number): Array<YearCell>[] {\n  const years = Array.from({ length: 20 }, (v, index) => {\n    return {\n      year: rangeStartYear + index,\n      isCurrentYear: new Date().getFullYear() === rangeStartYear + index,\n      isSelectedYear: selectedYear === rangeStartYear + index,\n    };\n  });\n  return [years.slice(0, 5), years.slice(5, 10), years.slice(10, 15), years.slice(15, 20)];\n}\n\nexport function validateAndReturnDateFormatter(format: string) {\n  const partsMap: Record<'YYYY' | 'MM' | 'DD', boolean> = { YYYY: true, MM: true, DD: true };\n  const parts = format.split('-') as ('YYYY' | 'MM' | 'DD')[];\n  if (parts.length !== 3) {\n    throw new Error('Date format is invalid.');\n  }\n  if (!parts.every((part) => partsMap[part])) {\n    throw new Error('Date format uses unknown parts.');\n  }\n  return (year: number, month: number, date: number, separator: string): string => {\n    let string = '';\n    parts.forEach((part, index) => {\n      if (part === 'YYYY') {\n        string += year;\n      }\n      if (part === 'MM') {\n        string += month;\n      }\n      if (part === 'DD') {\n        string += date;\n      }\n      if (index !== 2) {\n        string += separator;\n      }\n    });\n    return string;\n  };\n}\n\nfunction checkIfDateIsDisabledHOF(params: CheckIfDateIsDisabledHOFParams) {\n  const { disablePast, disableToday, disableFuture, customDisabledCheck, maxDate, minDate, applyMax, applyMin } =\n    params;\n\n  const date = new Date();\n  const dayOfMonth = date.getDate();\n  const currentYear = date.getFullYear();\n  const currentMonth = date.getMonth();\n  const maxDateParts: DateParts = {\n    month: maxDate.getMonth(),\n    monthDate: maxDate.getDate(),\n    year: maxDate.getFullYear(),\n  };\n  const minDateParts: DateParts = {\n    month: minDate.getMonth(),\n    monthDate: minDate.getDate(),\n    year: minDate.getFullYear(),\n  };\n\n  return function checkIfDateIsDisabled(year: number, month: MonthIndices, date: number, weekday: WeekdayIndices) {\n    if (disablePast) {\n      if (year < currentYear) {\n        return true;\n      }\n\n      if (year === currentYear && month < currentMonth) {\n        return true;\n      }\n\n      if (year === currentYear && month === currentMonth && date < dayOfMonth) {\n        return true;\n      }\n    }\n    if (disableToday) {\n      if (year === currentYear && month === currentMonth && date === dayOfMonth) {\n        return true;\n      }\n    }\n    if (disableFuture) {\n      if (year > currentYear) {\n        return true;\n      }\n\n      if (year === currentYear && month > currentMonth) {\n        return true;\n      }\n\n      if (year === currentYear && month === currentMonth && date > dayOfMonth) {\n        return true;\n      }\n    }\n\n    if (applyMax) {\n      if (isBefore({ year, monthDate: date, month }, maxDateParts)) {\n        return true;\n      }\n    }\n\n    if (applyMin) {\n      if (isBefore(minDateParts, { year, monthDate: date, month })) {\n        return true;\n      }\n    }\n\n    if (typeof customDisabledCheck === 'function') {\n      return customDisabledCheck({\n        year: year,\n        month: month,\n        weekday: weekday,\n        date: date,\n      });\n    }\n\n    return false;\n  };\n}\n\nexport function getDaysOfMonthViewMetrix(params: GetDaysOfMonthViewMetrixParams): Array<DayOfMonthCell>[] {\n  const {\n    isRangeSelectModeOn,\n    newRangeStartYear,\n    newRangeStartDate,\n    newRangeStartMonth,\n    newRangeEndYear,\n    newRangeEndDate,\n    isSelectMultiDate,\n    selectedMultiDates,\n    newRangeEndMonth,\n    isRangeView,\n    selectedEndDayOfMonth,\n    selectedEndMonth,\n    weekendIndexes,\n    selectedEndYear,\n    selectedStartDayOfMonth,\n    selectedStartMonth,\n    selectedStartYear,\n    yearInView,\n    monthInView,\n    startOfTheWeek,\n    selectedYear,\n    selectedMonth,\n    selectedDayOfMonth,\n    disableFuture = false,\n    disablePast = false,\n    disableToday = false,\n    maxDate,\n    minDate,\n    applyMax,\n    applyMin,\n    isDisabled,\n  } = params;\n\n  const matrix: Array<DayOfMonthCell>[] = [[], [], [], [], [], []];\n\n  const currentMonthDatesStartIndex = getInfluencedWeekDayIndexOnFirstDateOfMonth(\n    yearInView,\n    monthInView,\n    startOfTheWeek\n  );\n\n  const weekends = weekendIndexes;\n\n  const checkDisabledForADate = checkIfDateIsDisabledHOF({\n    disablePast,\n    disableToday,\n    disableFuture,\n    customDisabledCheck: isDisabled,\n    maxDate,\n    minDate,\n    applyMax,\n    applyMin,\n  });\n\n  const todaysDate = new Date().getDate();\n  const todaysMonth = new Date().getMonth();\n  const todaysYear = new Date().getFullYear();\n  const totalDaysInCurrentMonth = getNumberOfDaysInAMonth(yearInView, monthInView);\n\n  const isPrevMonthFromLastYear = monthInView === 0;\n  const isCurrentMonthLast = monthInView === 11;\n\n  const totalDaysInPrevMonth = getNumberOfDaysInAMonth(\n    isPrevMonthFromLastYear ? getPreviousYear(yearInView) : yearInView,\n    getPreviousMonth(monthInView)\n  );\n\n  // calendar has 6 rows (0 - 5)\n  let row = 0;\n  let weekColumn: WeekdayIndices = 0;\n\n  //  31 - (6 - 1) === 26\n  const lastMonthDateStartFrom = totalDaysInPrevMonth - (currentMonthDatesStartIndex - 1);\n\n  // first loop to fill cell values of last month\n  for (let date = lastMonthDateStartFrom; date <= totalDaysInPrevMonth; date++) {\n    if (weekColumn === 7) {\n      weekColumn = 0;\n      row++;\n    }\n    const currMonth = getPreviousMonth(monthInView);\n    const currYear = isPrevMonthFromLastYear ? getPreviousYear(yearInView) : yearInView;\n\n    const rangeStart = { month: selectedStartMonth, year: selectedStartYear, monthDate: selectedStartDayOfMonth };\n    const rangeEnd = { month: selectedEndMonth, year: selectedEndYear, monthDate: selectedEndDayOfMonth };\n    const currDate = { month: currMonth, year: currYear, monthDate: date };\n    const newRangeStart = {\n      month: newRangeStartMonth as number,\n      year: newRangeStartYear as number,\n      monthDate: newRangeStartDate as number,\n    };\n    const newRangeEnd = {\n      month: newRangeEndMonth as number,\n      year: newRangeEndYear as number,\n      monthDate: newRangeEndDate as number,\n    };\n    // if new range dates are VALID\n    // then use them to compute in range values\n\n    matrix[row].push({\n      date: date,\n      month: currMonth,\n      activeMonthInView: false,\n      isInRange: isRangeView\n        ? isRangeSelectModeOn\n          ? isPartValid(newRangeStart) && isPartValid(newRangeEnd)\n            ? isBefore(newRangeEnd, newRangeStart)\n              ? isPartOfRange(newRangeStart, newRangeEnd, currDate)\n              : isPartOfRange(newRangeEnd, newRangeStart, currDate)\n            : false\n          : isPartOfRange(rangeStart, rangeEnd, currDate)\n        : false,\n      isRangeStart: isRangeView\n        ? isRangeSelectModeOn\n          ? isPartValid(newRangeStart)\n            ? isEqual(newRangeStart, currDate)\n            : false\n          : isEqual(rangeStart, currDate)\n        : false,\n      isRangeEnd: isRangeView ? (isRangeSelectModeOn ? false : isEqual(rangeEnd, currDate)) : false,\n      year: currYear,\n      isWeekend: typeof weekends.find((c) => c === weekColumn) === 'number' ? true : false,\n      dayOfWeek: getNativeWeekDayIndexFromAStartDayInfluencedIndex(weekColumn, startOfTheWeek),\n      isToday: date === todaysDate && currMonth === todaysMonth && currYear === todaysYear,\n      isFirstRow: row === 0,\n      isLastRow: row === 5,\n      isFirsColumn: weekColumn === 0,\n      isLastColumn: weekColumn === 6,\n      isSelected: isSelectMultiDate\n        ? !!selectedMultiDates[toString(new Date(currDate.year, currDate.month, currDate.monthDate))]\n        : currMonth === selectedMonth && currYear === selectedYear && date === selectedDayOfMonth,\n      // not modified\n      isDisabled: checkDisabledForADate(\n        currYear,\n        currMonth,\n        date,\n        getNativeWeekDayIndexFromAStartDayInfluencedIndex(weekColumn, startOfTheWeek)\n      ),\n    });\n    weekColumn++;\n  }\n\n  // second loop to fill cell values of current month\n  for (let date = 1; date <= totalDaysInCurrentMonth; date++) {\n    if (weekColumn === 7) {\n      weekColumn = 0;\n      row++;\n    }\n    const currMonth = monthInView;\n    const currYear = yearInView;\n    const isToday = date === todaysDate && monthInView === todaysMonth && yearInView === todaysYear;\n\n    const rangeStart = { month: selectedStartMonth, year: selectedStartYear, monthDate: selectedStartDayOfMonth };\n    const rangeEnd = { month: selectedEndMonth, year: selectedEndYear, monthDate: selectedEndDayOfMonth };\n    const currDate = { month: currMonth, year: currYear, monthDate: date };\n    const newRangeStart = {\n      month: newRangeStartMonth as number,\n      year: newRangeStartYear as number,\n      monthDate: newRangeStartDate as number,\n    };\n    const newRangeEnd = {\n      month: newRangeEndMonth as number,\n      year: newRangeEndYear as number,\n      monthDate: newRangeEndDate as number,\n    };\n\n    matrix[row].push({\n      date: date,\n      month: currMonth,\n      activeMonthInView: true,\n      isInRange: isRangeView\n        ? isRangeSelectModeOn\n          ? isPartValid(newRangeStart) && isPartValid(newRangeEnd)\n            ? isBefore(newRangeEnd, newRangeStart)\n              ? isPartOfRange(newRangeStart, newRangeEnd, currDate)\n              : isPartOfRange(newRangeEnd, newRangeStart, currDate)\n            : false\n          : isPartOfRange(rangeStart, rangeEnd, currDate)\n        : false,\n      isRangeStart: isRangeView\n        ? isRangeSelectModeOn\n          ? isPartValid(newRangeStart)\n            ? isEqual(newRangeStart, currDate)\n            : false\n          : isEqual(rangeStart, currDate)\n        : false,\n      isRangeEnd: isRangeView ? (isRangeSelectModeOn ? false : isEqual(rangeEnd, currDate)) : false,\n      year: currYear,\n      dayOfWeek: getNativeWeekDayIndexFromAStartDayInfluencedIndex(weekColumn, startOfTheWeek),\n      isWeekend: typeof weekends.find((c) => c === weekColumn) === 'number' ? true : false,\n      isToday: isToday,\n      isFirstRow: row === 0,\n      isLastRow: row === 5,\n      isFirsColumn: weekColumn === 0,\n      isLastColumn: weekColumn === 6,\n      isSelected: isSelectMultiDate\n        ? !!selectedMultiDates[toString(new Date(currDate.year, currDate.month, currDate.monthDate))]\n        : currMonth === selectedMonth && currYear === selectedYear && date === selectedDayOfMonth,\n      isDisabled: checkDisabledForADate(\n        currYear,\n        currMonth,\n        date,\n        getNativeWeekDayIndexFromAStartDayInfluencedIndex(weekColumn, startOfTheWeek)\n      ),\n    });\n    weekColumn++;\n  }\n\n  let date = 1;\n  // last loop to fill cell values of next month\n\n  while (matrix[5].length < 7) {\n    if (weekColumn === 7) {\n      weekColumn = 0;\n      row++;\n    }\n    const currMonth = getNextMonth(monthInView);\n    const currYear = isCurrentMonthLast ? yearInView + 1 : yearInView;\n\n    const rangeStart = { month: selectedStartMonth, year: selectedStartYear, monthDate: selectedStartDayOfMonth };\n    const rangeEnd = { month: selectedEndMonth, year: selectedEndYear, monthDate: selectedEndDayOfMonth };\n    const currDate = { month: currMonth, year: currYear, monthDate: date };\n    const newRangeStart = {\n      month: newRangeStartMonth as number,\n      year: newRangeStartYear as number,\n      monthDate: newRangeStartDate as number,\n    };\n    const newRangeEnd = {\n      month: newRangeEndMonth as number,\n      year: newRangeEndYear as number,\n      monthDate: newRangeEndDate as number,\n    };\n\n    matrix[row].push({\n      date: date,\n      month: currMonth,\n      activeMonthInView: false,\n      isInRange: isRangeView\n        ? isRangeSelectModeOn\n          ? isPartValid(newRangeStart) && isPartValid(newRangeEnd)\n            ? isBefore(newRangeEnd, newRangeStart)\n              ? isPartOfRange(newRangeStart, newRangeEnd, currDate)\n              : isPartOfRange(newRangeEnd, newRangeStart, currDate)\n            : false\n          : isPartOfRange(rangeStart, rangeEnd, currDate)\n        : false,\n      isRangeStart: isRangeView\n        ? isRangeSelectModeOn\n          ? isPartValid(newRangeStart)\n            ? isEqual(newRangeStart, currDate)\n            : false\n          : isEqual(rangeStart, currDate)\n        : false,\n      isRangeEnd: isRangeView ? (isRangeSelectModeOn ? false : isEqual(rangeEnd, currDate)) : false,\n      year: currYear,\n      dayOfWeek: getNativeWeekDayIndexFromAStartDayInfluencedIndex(weekColumn, startOfTheWeek),\n      isWeekend: typeof weekends.find((c) => c === weekColumn) === 'number' ? true : false,\n      isToday: date === todaysDate && currMonth === todaysMonth && currYear === todaysYear,\n      isFirstRow: row === 0,\n      isLastRow: row === 5,\n      isFirsColumn: weekColumn === 0,\n      isLastColumn: weekColumn === 6,\n      isSelected: isSelectMultiDate\n        ? !!selectedMultiDates[toString(new Date(currDate.year, currDate.month, currDate.monthDate))]\n        : currMonth === selectedMonth && currYear === selectedYear && date === selectedDayOfMonth,\n      isDisabled: checkDisabledForADate(\n        currYear,\n        currMonth,\n        date,\n        getNativeWeekDayIndexFromAStartDayInfluencedIndex(weekColumn, startOfTheWeek)\n      ),\n    });\n    weekColumn++;\n    date++;\n  }\n\n  return matrix;\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport type { DayOfMonthCell, IsDisabledParams, MonthCell, MonthIndices, YearCell, WeekdayIndices } from './types';\n\nimport {\n  getWeekDaysIndexToLabelMapForAStartOfTheWeek,\n  getStartOfRangeForAYear,\n  getPreviousYear,\n  getPreviousMonth,\n  getPreviousRangeStartingYear,\n  getNextYear,\n  getNextMonth,\n  getNextRangeStartingYear,\n  getYearsViewMetrix,\n  getMonthViewMetrix,\n  getDaysOfMonthViewMetrix,\n  getYearRangeLimits,\n  validateAndReturnDateFormatter,\n  getWeekendInfo,\n  isValid,\n  isBefore,\n  toString,\n} from './date-utils';\n\nimport { NATIVE_INDEX_TO_LABEL_MONTHS_MAP } from './constants';\n\ninterface Value {\n  value: Date;\n  year: number;\n  month: number;\n  date: number;\n  formatted: string;\n}\n\ntype RangeValue = [Value, Value];\ntype MultiValue = Value[];\n\ninterface Props {\n  /**\n   * The initial month and year that will be shown to the user.\n   * By default it shows today's date month and year. If a date is selected it shows the selected\n   * date's month and year.\n   */\n  initialViewDate?: Date;\n  /**\n   * Value of the date in ISO format.\n   * Only applicable if selectRange is false\n   */\n  date?: Date;\n  /**\n   * Start date of the date range.\n   * Only applicable if selectRange is true.\n   */\n  startdate?: Date;\n  /**\n   * End date of the date range.\n   * Only applicable if selectRange is true.\n   */\n  endDate?: Date;\n  /**\n   * Array of weekday number that are part of weekend.\n   * The weekday number depends on the start of the week if provided one.\n   * By default this is [6, 0] which Saturday, Sunday respectively as per the 0 based start of the week.\n   */\n  weekends?: WeekdayIndices[];\n  /**\n   * By default the calendar starts from Sun which is represented in JS as 0 index.\n   * You can provide the index for any other day that you want as start of the week.\n   */\n  startOfWeek?: WeekdayIndices;\n  /**\n   * Separator to be used when formatting the date string.\n   * Default is '-' i.e 'DD-MM-YYYY'\n   */\n  separator?: string;\n  /**\n   * A combination of YYYY-MM-DD.\n   * Eg. MM-DD-YYYY, DD-MM-YYYY etc.\n   * Default is '-' i.e 'DD-MM-YYYY'\n   */\n  format?: string;\n  /**\n   * A boolean flag to disable all past dates.\n   */\n  disablePast?: boolean;\n  /**\n   * A boolean flag to disable today's date.\n   */\n  disableToday?: boolean;\n  /**\n   * A boolean flag to disable all future dates.\n   */\n  disableFuture?: boolean;\n  /**\n   * A callback function that can be used to disable specific dates on the calendar.\n   */\n  isDisabled?: (params: IsDisabledParams) => boolean;\n  /**\n   * User will not be able to select past this date. This date will be selectable.\n   */\n  maxAllowedDate?: Date;\n  /**\n   * User will not be able to select before this date. This date will be selectable.\n   */\n  minAllowedDate?: Date;\n  /**\n   * Renders a range selector UI for the calendar\n   */\n  selectRange?: boolean;\n  /**\n   * Renders a multi date selector UI for the calendar\n   */\n  selectMultiDates?: boolean;\n  /**\n   * OnChange callback functionn.\n   */\n  onChange?: (value: Value | MultiValue | RangeValue) => any | Promise<any>;\n}\n\n// Add an option to freeze ui if date is invalid\n// Add a isEditable option\n// Change is in range to could be in range as a class rather than hover\n// dont show range hover on diabalbed\n\nfunction Calendar({\n  date,\n  selectRange,\n  weekends,\n  startdate,\n  initialViewDate,\n  endDate,\n  startOfWeek = 1,\n  maxAllowedDate,\n  minAllowedDate,\n  selectMultiDates,\n  isDisabled,\n  onChange,\n  separator = '-',\n  format = 'DD-MM-YYYY',\n  disableFuture = false,\n  disablePast = false,\n  disableToday = false,\n}: Props) {\n  // range takes precedence over multi select\n  const [isSelectMultiDate] = useState(\n    typeof selectMultiDates === 'boolean' && !selectRange ? selectMultiDates : false\n  );\n\n  // start day of the week\n  const [startOfTheWeek] = useState(startOfWeek);\n\n  // maxDate\n  const [maxDate] = useState(() => {\n    return isValid(maxAllowedDate) ? maxAllowedDate : new Date();\n  });\n  const [applyMaxConstraint] = useState(() => {\n    return isValid(maxAllowedDate)\n      ? isValid(minAllowedDate)\n        ? isBefore(\n            {\n              month: maxAllowedDate.getMonth(),\n              monthDate: maxAllowedDate.getDate(),\n              year: maxAllowedDate.getFullYear(),\n            },\n            {\n              month: minAllowedDate.getMonth(),\n              monthDate: minAllowedDate.getDate(),\n              year: minAllowedDate.getFullYear(),\n            }\n          )\n        : true\n      : false;\n  });\n\n  // minDate\n  const [minDate] = useState(() => {\n    return isValid(minAllowedDate) ? minAllowedDate : new Date();\n  });\n  const [applyminConstraint] = useState(() => {\n    return isValid(minAllowedDate)\n      ? isValid(maxAllowedDate)\n        ? isBefore(\n            {\n              month: maxAllowedDate.getMonth(),\n              monthDate: maxAllowedDate.getDate(),\n              year: maxAllowedDate.getFullYear(),\n            },\n            {\n              month: minAllowedDate.getMonth(),\n              monthDate: minAllowedDate.getDate(),\n              year: minAllowedDate.getFullYear(),\n            }\n          )\n        : true\n      : false;\n  });\n\n  const [weekendIndexes] = useState(() => {\n    return Array.isArray(weekends) && weekends.every((num) => typeof num === 'number')\n      ? weekends\n      : getWeekendInfo(startOfTheWeek);\n  });\n\n  // current view\n  const [view, setView] = useState<'years' | 'months' | 'month_dates'>('month_dates');\n  const [monthInView, setMonthInView] = useState<MonthIndices>(\n    (isValid(initialViewDate)\n      ? new Date(initialViewDate).getMonth()\n      : !selectRange && isValid(date)\n      ? new Date(date).getMonth()\n      : new Date().getMonth()) as MonthIndices\n  );\n  const [yearInView, setYearInView] = useState(\n    isValid(initialViewDate)\n      ? new Date(initialViewDate).getFullYear()\n      : !selectRange && isValid(date)\n      ? new Date(date).getFullYear()\n      : new Date().getFullYear()\n  );\n\n  // selected multi dates\n  const [selectedMultiDates, setSelectedMultiDates] = useState<Record<string, Date | undefined>>({});\n\n  // selected single date\n  const [selectedMonth, setSelectedMonth] = useState(\n    (isValid(date) ? new Date(date).getMonth() : new Date().getMonth()) as MonthIndices\n  );\n  const [selectedDate, setSelectedDate] = useState(isValid(date) ? new Date(date).getDate() : new Date().getDate());\n  const [selectedYear, setSelectedYear] = useState(\n    isValid(date) ? new Date(date).getFullYear() : new Date().getFullYear()\n  );\n\n  // is range select mode on\n  const [isRangeSelectModeOn, setIsRangeSelectModeOn] = useState(false);\n\n  // selected range start date\n  const [selectedStartMonth, setSelectedStartMonth] = useState(\n    (isValid(startdate) ? new Date(startdate).getMonth() : new Date().getMonth()) as MonthIndices\n  );\n  const [selectedStartDate, setSelectedStartDate] = useState(\n    isValid(startdate) ? new Date(startdate).getDate() : new Date().getDate()\n  );\n  const [selectedStartYear, setSelectedStartYear] = useState(\n    isValid(startdate) ? new Date(startdate).getFullYear() : new Date().getFullYear()\n  );\n\n  // selected range end date\n  const [selectedEndMonth, setSelectedEndMonth] = useState(\n    (isValid(endDate) ? new Date(endDate).getMonth() : new Date().getMonth()) as MonthIndices\n  );\n  const [selectedEndDate, setSelectedEndDate] = useState(\n    isValid(endDate) ? new Date(endDate).getDate() : new Date().getDate()\n  );\n  const [selectedEndYear, setSelectedEndYear] = useState(\n    isValid(endDate) ? new Date(endDate).getFullYear() : new Date().getFullYear()\n  );\n\n  // new range start date\n  const [newRangeStartMonth, setNewRangeStartMonth] = useState<undefined | MonthIndices>(selectedStartMonth);\n  const [newRangeStartDate, setNewRangeStartDate] = useState<undefined | number>(selectedStartDate);\n  const [newRangeStartYear, setNewRangeStartYear] = useState<undefined | number>(selectedStartYear);\n\n  // new range range end date\n  const [newRangeEndMonth, setNewRangeEndMonth] = useState<undefined | MonthIndices>(selectedEndMonth);\n  const [newRangeEndDate, setNewRangeEndDate] = useState<undefined | number>(selectedEndDate);\n  const [newRangeEndYear, setNewRangeEndYear] = useState<undefined | number>(selectedEndYear);\n\n  const [startingYearForCurrRange, setStartingYearForCurrRange] = useState(getStartOfRangeForAYear(yearInView));\n\n  // 1 - 20, 21 - 40\n  const [yearMatrixRangeStart, yearMatrixRangeEnd] = useMemo(() => {\n    return getYearRangeLimits(startingYearForCurrRange);\n  }, [startingYearForCurrRange]);\n\n  // week days as per the start day of the week\n  const WEEK_DAYS = useMemo(() => {\n    return getWeekDaysIndexToLabelMapForAStartOfTheWeek(startOfTheWeek);\n  }, [startOfTheWeek]);\n\n  // date formatter\n  const formatter = useMemo(() => {\n    return validateAndReturnDateFormatter(format);\n  }, [format]);\n\n  useEffect(() => {\n    setStartingYearForCurrRange(getStartOfRangeForAYear(yearInView));\n  }, [yearInView, setStartingYearForCurrRange]);\n\n  // matrices for different views\n  const yearsViewMatrix = useMemo<YearCell[][]>(() => {\n    return getYearsViewMetrix(startingYearForCurrRange, selectedYear);\n  }, [startingYearForCurrRange, selectedYear]);\n\n  const monthsViewMatrix = useMemo<MonthCell[][]>(() => {\n    return getMonthViewMetrix(selectedMonth);\n  }, [selectedMonth]);\n\n  const daysOfMMonthViewMatrix = useMemo(() => {\n    return getDaysOfMonthViewMetrix({\n      newRangeEndYear,\n      selectedMultiDates,\n      newRangeEndDate,\n      weekendIndexes,\n      newRangeEndMonth,\n      newRangeStartYear,\n      newRangeStartDate,\n      newRangeStartMonth,\n      isRangeView: !!selectRange,\n      isRangeSelectModeOn,\n      selectedEndYear,\n      isSelectMultiDate,\n      selectedEndMonth,\n      selectedEndDayOfMonth: selectedEndDate,\n      selectedStartDayOfMonth: selectedStartDate,\n      selectedStartYear,\n      selectedStartMonth,\n      yearInView,\n      monthInView,\n      startOfTheWeek,\n      selectedYear,\n      selectedMonth,\n      selectedDayOfMonth: selectedDate,\n      disableFuture,\n      disablePast,\n      disableToday,\n      isDisabled,\n      maxDate: maxDate,\n      minDate: minDate,\n      applyMax: applyMaxConstraint,\n      applyMin: applyminConstraint,\n    });\n  }, [\n    newRangeEndYear,\n    selectedMultiDates,\n    newRangeEndDate,\n    weekendIndexes,\n    newRangeEndMonth,\n    newRangeStartYear,\n    newRangeStartDate,\n    newRangeStartMonth,\n    selectRange,\n    isRangeSelectModeOn,\n    selectedEndYear,\n    isSelectMultiDate,\n    selectedEndMonth,\n    selectedEndDate,\n    selectedStartDate,\n    selectedStartYear,\n    selectedStartMonth,\n    yearInView,\n    monthInView,\n    startOfTheWeek,\n    selectedYear,\n    selectedMonth,\n    selectedDate,\n    disableFuture,\n    disablePast,\n    disableToday,\n    isDisabled,\n    maxDate,\n    minDate,\n    applyMaxConstraint,\n    applyminConstraint,\n  ]);\n\n  // callback handlers\n  const onPrevClick = useCallback(\n    (e) => {\n      if (view === 'month_dates') {\n        const isPrevMonthFromLastYear = monthInView === 0;\n        if (isPrevMonthFromLastYear) {\n          setYearInView(getPreviousYear(yearInView));\n        }\n        setMonthInView(getPreviousMonth(monthInView));\n      }\n      if (view === 'years') {\n        setStartingYearForCurrRange(getPreviousRangeStartingYear(startingYearForCurrRange));\n      }\n      if (view === 'months') {\n        setYearInView(yearInView !== 1 ? yearInView - 1 : 1);\n      }\n    },\n    [\n      setMonthInView,\n      monthInView,\n      setYearInView,\n      yearInView,\n      view,\n      setStartingYearForCurrRange,\n      startingYearForCurrRange,\n    ]\n  );\n\n  const onNextClick = useCallback(\n    (e) => {\n      if (view === 'month_dates') {\n        const isCurrentMonthLast = monthInView === 11;\n        if (isCurrentMonthLast) {\n          setYearInView(getNextYear(yearInView));\n        }\n        setMonthInView(getNextMonth(monthInView));\n      }\n      if (view === 'years') {\n        setStartingYearForCurrRange(getNextRangeStartingYear(startingYearForCurrRange));\n      }\n\n      if (view === 'months') {\n        setYearInView(getNextYear(yearInView));\n      }\n    },\n    [\n      setMonthInView,\n      monthInView,\n      setYearInView,\n      yearInView,\n      view,\n      setStartingYearForCurrRange,\n      startingYearForCurrRange,\n    ]\n  );\n\n  const onDateClicked = useCallback(\n    (cell: DayOfMonthCell) => {\n      if (selectRange) {\n        if (isRangeSelectModeOn) {\n          // check if it is the first click or seconds\n\n          const clickedDate = { month: cell.month, monthDate: cell.date, year: cell.year };\n          const previouslySelected = {\n            month: newRangeStartMonth as MonthIndices,\n            monthDate: newRangeStartDate as number,\n            year: newRangeStartYear as number,\n          };\n\n          if (isBefore(previouslySelected, clickedDate)) {\n            setSelectedStartYear(clickedDate.year);\n            setSelectedStartMonth(clickedDate.month);\n            setSelectedStartDate(clickedDate.monthDate);\n\n            setSelectedEndYear(previouslySelected.year);\n            setSelectedEndMonth(previouslySelected.month);\n            setSelectedEndDate(previouslySelected.monthDate);\n\n            const startDate = new Date();\n            startDate.setDate(clickedDate.monthDate);\n            startDate.setFullYear(clickedDate.year);\n            startDate.setMonth(clickedDate.month);\n            startDate.setMinutes(0, 0, 0);\n\n            const endDate = new Date();\n            endDate.setDate(previouslySelected.monthDate);\n            endDate.setFullYear(previouslySelected.year);\n            endDate.setMonth(previouslySelected.month);\n            endDate.setMinutes(0, 0, 0);\n\n            onChange &&\n              onChange([\n                {\n                  value: startDate,\n                  year: clickedDate.year,\n                  month: clickedDate.month,\n                  date: clickedDate.monthDate,\n                  formatted: formatter(clickedDate.year, clickedDate.month + 1, clickedDate.monthDate, separator),\n                },\n                {\n                  value: endDate,\n                  year: previouslySelected.year,\n                  month: previouslySelected.month,\n                  date: previouslySelected.monthDate,\n                  formatted: formatter(\n                    previouslySelected.year,\n                    previouslySelected.month + 1,\n                    previouslySelected.monthDate,\n                    separator\n                  ),\n                },\n              ]);\n          } else {\n            setSelectedStartYear(previouslySelected.year);\n            setSelectedStartMonth(previouslySelected.month);\n            setSelectedStartDate(previouslySelected.monthDate);\n\n            setSelectedEndYear(clickedDate.year);\n            setSelectedEndMonth(clickedDate.month);\n            setSelectedEndDate(clickedDate.monthDate);\n\n            const startDate = new Date();\n            startDate.setDate(previouslySelected.monthDate);\n            startDate.setFullYear(previouslySelected.year);\n            startDate.setMonth(previouslySelected.monthDate);\n            startDate.setMinutes(0, 0, 0);\n\n            const endDate = new Date();\n            endDate.setDate(clickedDate.monthDate);\n            endDate.setFullYear(clickedDate.year);\n            endDate.setMonth(clickedDate.month);\n            endDate.setMinutes(0, 0, 0);\n\n            onChange &&\n              onChange([\n                {\n                  value: startDate,\n                  year: previouslySelected.year,\n                  month: previouslySelected.month,\n                  date: previouslySelected.monthDate,\n                  formatted: formatter(\n                    previouslySelected.year,\n                    previouslySelected.month + 1,\n                    previouslySelected.monthDate,\n                    separator\n                  ),\n                },\n                {\n                  value: endDate,\n                  year: clickedDate.year,\n                  month: clickedDate.month,\n                  date: clickedDate.monthDate,\n                  formatted: formatter(clickedDate.year, clickedDate.month + 1, clickedDate.monthDate, separator),\n                },\n              ]);\n          }\n\n          setNewRangeEndYear(undefined);\n          setNewRangeEndMonth(undefined);\n          setNewRangeEndDate(undefined);\n\n          setIsRangeSelectModeOn(false);\n        } else {\n          // select first date\n          setNewRangeStartYear(cell.year);\n          setNewRangeStartMonth(cell.month);\n          setNewRangeStartDate(cell.date);\n\n          setNewRangeEndYear(undefined);\n          setNewRangeEndMonth(undefined);\n          setNewRangeEndDate(undefined);\n\n          setIsRangeSelectModeOn(true);\n        }\n      } else if (isSelectMultiDate) {\n        const date = new Date(cell.year, cell.month, cell.date);\n        const stringkey = toString(date);\n\n        if (!!selectedMultiDates[stringkey]) {\n          setSelectedMultiDates({\n            ...selectedMultiDates,\n            [stringkey]: undefined,\n          });\n        } else {\n          setSelectedMultiDates({\n            ...selectedMultiDates,\n            [stringkey]: date,\n          });\n        }\n\n        onChange &&\n          onChange(\n            Object.keys(selectedMultiDates)\n              .filter((dk) => !!selectedMultiDates[dk])\n              .map((dk) => ({\n                value: selectedMultiDates[dk] as Date,\n                year: (selectedMultiDates[dk] as Date).getFullYear(),\n                month: (selectedMultiDates[dk] as Date).getMonth(),\n                date: (selectedMultiDates[dk] as Date).getDate(),\n                formatted: formatter(\n                  (selectedMultiDates[dk] as Date).getFullYear(),\n                  (selectedMultiDates[dk] as Date).getMonth() + 1,\n                  (selectedMultiDates[dk] as Date).getDate(),\n                  separator\n                ),\n              }))\n          );\n      } else {\n        setSelectedMonth(cell.month);\n        setSelectedYear(cell.year);\n        setSelectedDate(cell.date);\n        const date = new Date();\n        date.setFullYear(cell.year);\n        date.setMonth(cell.month);\n        date.setDate(cell.date);\n        date.setMinutes(0, 0, 0);\n\n        onChange &&\n          onChange({\n            value: date,\n            year: cell.year,\n            month: cell.month,\n            date: cell.date,\n            formatted: formatter(cell.year, cell.month + 1, cell.date, separator),\n          });\n      }\n\n      setMonthInView(cell.month);\n      setYearInView(cell.year);\n    },\n    [\n      selectRange,\n      isSelectMultiDate,\n      isRangeSelectModeOn,\n      newRangeStartMonth,\n      newRangeStartDate,\n      newRangeStartYear,\n      onChange,\n      formatter,\n      separator,\n      selectedMultiDates,\n    ]\n  );\n\n  return (\n    <section className='arc'>\n      <header className='arc_header'>\n        <button className='arc_header_nav arc_header_nav-prev' onClick={onPrevClick}>\n          ←\n        </button>\n        {view === 'month_dates' ? (\n          <button className='arc_header_label arc_header_label-days-of-month' onClick={() => setView('years')}>\n            <div>\n              <span>{NATIVE_INDEX_TO_LABEL_MONTHS_MAP[monthInView]}</span>\n            </div>\n            <div>\n              <span>{yearInView}</span>\n            </div>\n          </button>\n        ) : view === 'months' ? (\n          <button className='arc_header_label arc_header_label-months'>\n            <div onClick={() => setView('years')}>\n              <span>{yearInView}</span>\n            </div>\n          </button>\n        ) : (\n          <button className='arc_header_label arc_header_label-years' onClick={() => setView('month_dates')}>\n            <div>\n              <span>\n                {yearMatrixRangeStart}-{yearMatrixRangeEnd}\n              </span>\n            </div>\n          </button>\n        )}\n        <button className='arc_header_nav arc_header_nav-next' onClick={onNextClick}>\n          →\n        </button>\n      </header>\n      <main className='arc_view'>\n        {view === 'months' && (\n          <div className='arc_view-months'>\n            {monthsViewMatrix.map((row, index) => (\n              <div className='arc_view_row' key={index}>\n                {row.map((cell) => (\n                  <div className={`arc_view_cell${cell.isCurrentMonth ? ' arc_this_month' : ''}`} key={cell.month}>\n                    <button\n                      onClick={() => {\n                        setMonthInView(cell.month);\n                        setView('month_dates');\n                      }}>\n                      {NATIVE_INDEX_TO_LABEL_MONTHS_MAP[cell.month]}\n                    </button>\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n        )}\n        {view === 'years' && (\n          <div className='arc_view-years'>\n            {yearsViewMatrix.map((row, index) => (\n              <div className='arc_view_row' key={index}>\n                {row.map((cell) => (\n                  <div className={`arc_view_cell${cell.isCurrentYear ? ' arc_this_year' : ''}`} key={cell.year}>\n                    <button\n                      onClick={() => {\n                        setYearInView(cell.year);\n                        setView('months');\n                      }}>\n                      {cell.year}\n                    </button>\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n        )}\n        {view === 'month_dates' && (\n          <>\n            <ul className='arc_view_weekdays'>\n              {Object.keys(WEEK_DAYS).map((weekDay) => (\n                <li\n                  key={weekDay}\n                  className={`arc_view_weekdays_cell${\n                    typeof weekendIndexes.find((weekend) => weekend === Number(weekDay)) === 'number' ? ' arc_wknd' : ''\n                  }`}>\n                  <span>{WEEK_DAYS[Number(weekDay) as WeekdayIndices]}</span>\n                </li>\n              ))}\n            </ul>\n            <div className='arc_view-days-of-month' role='grid'>\n              {daysOfMMonthViewMatrix.map((row, index) => (\n                <div className='arc_view_row' key={index}>\n                  {row.map((cell) => (\n                    <div\n                      onMouseEnter={() => {\n                        if (selectRange) {\n                          if (isRangeSelectModeOn) {\n                            setNewRangeEndYear(cell.year);\n                            setNewRangeEndMonth(cell.month);\n                            setNewRangeEndDate(cell.date);\n                          }\n                        }\n                      }}\n                      key={cell.date}\n                      className={`arc_view_cell${cell.activeMonthInView ? ' arc_active' : ''}${\n                        cell.isWeekend ? ' arc_wknd' : ''\n                      }${cell.isToday ? ' arc_today' : ''}${cell.isFirstRow ? ' arc_fr' : ''}${\n                        cell.isLastRow ? ' arc_lr' : ''\n                      }${cell.isFirsColumn ? ' arc_fc' : ''}${cell.isLastColumn ? ' arc_lc' : ''}${\n                        cell.isSelected && !selectRange ? ' arc_selected' : ''\n                      }${cell.isDisabled ? ' arc_disabled' : ''}${cell.isInRange ? ' arc_in_range' : ''}${\n                        cell.isRangeStart ? ' arc_range_start' : ''\n                      }${cell.isRangeEnd ? ' arc_range_end' : ''}${isRangeSelectModeOn ? ' arc_range_mode' : ''}`}>\n                      <div className='arc_view_cell_value'>\n                        <button\n                          disabled={cell.isDisabled}\n                          tabIndex={cell.isDisabled ? -1 : 0}\n                          onClick={() => onDateClicked(cell)}>\n                          {cell.date}\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n          </>\n        )}\n      </main>\n    </section>\n  );\n}\n\nexport default Calendar;\n","import React, { useCallback, useState } from 'react';\n\nimport Calendar from './awesome-react-calendar/calendar';\n\nfunction App() {\n  const [val, setVal] = useState('{}');\n  const onChange = useCallback(\n    (value) => {\n      setVal(JSON.stringify(value, null, 4));\n    },\n    [setVal]\n  );\n  const maxDate = new Date(2021, 7, 25);\n  const minDate = new Date(2021, 7, 10);\n  return (\n    <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px' }}>\n      <section style={{ textAlign: 'center' }}>\n        <div>\n          <h2>Multi Date Select</h2>\n        </div>\n        <Calendar selectMultiDates disableToday separator='/' format='MM-DD-YYYY' onChange={onChange} />\n        <div>\n          <h2>Range Select With Min Max</h2>\n        </div>\n        <Calendar\n          initialViewDate={new Date(2021, 7, 10)}\n          selectRange\n          maxAllowedDate={maxDate}\n          minAllowedDate={minDate}\n          disableToday\n          separator='/'\n          format='MM-DD-YYYY'\n          onChange={onChange}\n          // startOfWeek={2}\n          date={new Date(2021, 1, 23)}\n        />\n        <div>\n          <h2>Range Select</h2>\n        </div>\n        <Calendar\n          selectRange\n          startdate={new Date(2021, 0, 8)}\n          endDate={new Date(2021, 0, 22)}\n          separator='/'\n          format='MM-DD-YYYY'\n          onChange={onChange}\n          // startOfWeek={2}\n          date={new Date(2021, 1, 23)}\n        />\n        <div>\n          <h2>Start Of The Weel Change</h2>\n        </div>\n        <Calendar startOfWeek={3} onChange={onChange} />\n        <div>\n          <h2>Weekend Change</h2>\n        </div>\n        <Calendar weekends={[4, 5, 6]} onChange={onChange} />\n        <div>\n          <h2>Past Disabled</h2>\n        </div>\n        <Calendar disablePast onChange={onChange} />\n        <div>\n          <h2>Today Disabled</h2>\n        </div>\n        <Calendar disableToday disablePast onChange={onChange} />\n        <div>\n          <h2>Future Disabled</h2>\n        </div>\n        <Calendar disableFuture onChange={onChange} />\n        <div>\n          <h2>Default</h2>\n        </div>\n        <Calendar onChange={onChange} />\n      </section>\n      <div>{val}</div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}