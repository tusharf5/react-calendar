{"version":3,"sources":["awesome-react-calendar/constants.ts","awesome-react-calendar/date-utils.ts","awesome-react-calendar/calendar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NATIVE_INDEX_TO_LABEL_WEEKDAY_MAP","0","1","2","3","4","5","6","NATIVE_INDEX_TO_LABEL_MONTHS_MAP","7","8","9","10","11","addDays","date","numberOfDaysToAdd","daysLeftToAdd","newDate","dayOfMonth","getDate","remainingDaysInMonth","getNumberOfDaysInAMonth","getFullYear","getMonth","daysThatCanBeAddedInThisMonth","Date","toString","isBefore","toCheckDate","isValid","isNaN","getTime","isEqual","first","second","isPartOfRange","rangeStart","rangeEnd","isALeapYear","year","month","getNativeWeekDayIndexFromAStartDayInfluencedIndex","weekdayAsPerChangedIndex","startOfTheWeek","diversion","getPreviousMonth","getNextMonth","getPreviousYear","getNextYear","getStartOfRangeForAYear","Number","toFixed","getDaysOfMonthViewMetrix","params","isRangeSelectModeOn","isRangeView","selectedDate","selectedRangeStart","selectedRangeEnd","highlightsMap","newSelectedRangeStart","newSelectedRangeEnd","isSelectMultiDate","selectedMultiDates","weekendIndexes","yearInView","monthInView","disableFuture","disablePast","disableToday","maxDate","minDate","applyMax","applyMin","isDisabled","matrix","currentMonthDatesStartIndex","setDate","setMonth","setFullYear","weekdayAsPerNativeIndex","getInfluencedWeekDayIndexAsPerAStartDay","getDay","getInfluencedWeekDayIndexOnFirstDateOfMonth","weekends","checkDisabledForADate","customDisabledCheck","currentYear","currentMonth","weekday","checkIfDateIsDisabledHOF","today","todaysDate","todaysMonth","todaysYear","totalDaysInCurrentMonth","isPrevMonthFromLastYear","isCurrentMonthLast","totalDaysInPrevMonth","row","weekColumn","currMonth","currYear","currDate","push","activeMonthInView","isHighlight","isInRange","isRangeStart","isRangeEnd","isWeekend","find","c","dayOfWeek","isToday","isFirstRow","isLastRow","isFirsColumn","isLastColumn","isSelected","length","Calendar","value","isMultiSelector","isRangeSelector","highlights","rangeStartValue","initialViewDate","rangeEndValue","startOfWeek","maxAllowedDate","minAllowedDate","fixedRange","onChange","separator","format","useState","isRangeSelectorView","isMultiSelectorView","isFixedRangeView","isNormalView","Array","isArray","Error","fixedRangeLength","setIsRangeSelectModeOn","filter","d","reduce","acc","curr","every","num","getWeekendInfo","weekDays","useMemo","Object","keys","slice","concat","weekdayIndex","index","getWeekDaysIndexToLabelMapForAStartOfTheWeek","formatter","partsMap","YYYY","MM","DD","parts","split","part","string","forEach","validateAndReturnDateFormatter","dateOfMonth","setSelectedDate","setSelectedMultiDates","setSelectedRangeStart","setSelectedRangeEnd","setNewSelectedRangeStart","setNewSelectedRangeEnd","view","setView","setMonthInView","setYearInView","startingYearForCurrRange","setStartingYearForCurrRange","useEffect","applyMaxConstraint","applyminConstraint","rangeStartYear","yearMatrixRangeStart","yearMatrixRangeEnd","yearsViewMatrix","selectedYear","years","from","v","isCurrentYear","isSelectedYear","getYearsViewMetrix","monthsViewMatrix","selectedMonth","months","k","isCurrentMonth","isSelectedMonth","getMonthViewMetrix","daysOfMMonthViewMatrix","onPrevClick","useCallback","e","onNextClick","onDateClicked","cell","clickedDate","previouslySelectedDate","startDate","endDate","formatted","undefined","stringkey","newselectedMultiDates","dk","map","className","onClick","weekDay","weekend","role","onMouseEnter","disabled","tabIndex","App","one","setOne","onChangeone","two","setTwo","onChangetwo","three","setThree","onChangethree","four","setFour","onChangefour","five","setFive","onChangefive","six","setSix","onChangesix","seven","setSeven","onChangeseven","eight","setEight","onChangeeight","nine","setNine","onChangenine","ten","setTen","onChangeTen","eleven","setEleven","onChangeEleven","tweleve","setTweleve","onChangeTweleve","thirteen","setThirteen","onChangeThirteen","fourteen","setFourteen","onChangeFourteen","fiveteen","setFiveteen","onChangeFiveteen","name","enableClipboard","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b474fe1f.chunk.js","sourcesContent":["import type { MonthIndices, WeekdayIndices } from './types';\n\n/**\n * This weekday index-to-label map is what is used by the Date object\n */\nexport const NATIVE_INDEX_TO_LABEL_WEEKDAY_MAP: Record<WeekdayIndices, string> = {\n  0: 'Su',\n  1: 'Mo',\n  2: 'Tu',\n  3: 'We',\n  4: 'Th',\n  5: 'Fr',\n  6: 'Sa',\n};\n\nexport const NATIVE_INDEX_TO_LABEL_MONTHS_MAP: Record<MonthIndices, string> = {\n  0: 'January',\n  1: 'February',\n  2: 'March',\n  3: 'April',\n  4: 'May',\n  5: 'June',\n  6: 'July',\n  7: 'August',\n  8: 'September',\n  9: 'October',\n  10: 'November',\n  11: 'December',\n};\n","/* eslint-disable no-loop-func */\nimport type {\n  MonthIndices,\n  WeekdayIndices,\n  MonthCell,\n  YearCell,\n  DayOfMonthCell,\n  GetDaysOfMonthViewMetrixParams,\n  CheckIfDateIsDisabledHOFParams,\n} from './types';\n\nimport { NATIVE_INDEX_TO_LABEL_WEEKDAY_MAP } from './constants';\n\n/**\n * Add number of days to a month.\n */\nexport function addDays(date: Date, numberOfDaysToAdd: number): Date {\n  let daysLeftToAdd = numberOfDaysToAdd;\n  let newDate = date;\n\n  while (daysLeftToAdd > 0) {\n    const dayOfMonth = newDate.getDate();\n    const totalDaysInMonth = getNumberOfDaysInAMonth(newDate.getFullYear(), newDate.getMonth() as MonthIndices);\n    const remainingDaysInMonth = totalDaysInMonth - dayOfMonth;\n    let daysThatCanBeAddedInThisMonth = 0;\n\n    if (remainingDaysInMonth >= daysLeftToAdd) {\n      daysThatCanBeAddedInThisMonth = daysLeftToAdd;\n      daysLeftToAdd = 0;\n      newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() + daysThatCanBeAddedInThisMonth);\n    } else {\n      daysThatCanBeAddedInThisMonth = remainingDaysInMonth;\n      daysLeftToAdd = daysLeftToAdd - remainingDaysInMonth;\n      if (newDate.getMonth() === 11) {\n        newDate = new Date(newDate.getFullYear() + 1, 0, 1);\n        daysLeftToAdd = daysLeftToAdd - 1;\n      } else {\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth() + 1, 1);\n        daysLeftToAdd = daysLeftToAdd - 1;\n      }\n    }\n  }\n\n  return newDate;\n}\n\n/**\n * Converts a date to string\n */\nexport function toString(date: Date) {\n  return `${date.getFullYear()}${date.getMonth()}${date.getDate()}`;\n}\n\n/**\n * Returns true if toCheck date is before the date\n */\nexport function isBefore(date: Date, toCheckDate: Date): boolean {\n  if (toCheckDate.getFullYear() < date.getFullYear()) {\n    return true;\n  }\n\n  if (toCheckDate.getFullYear() === date.getFullYear()) {\n    if (toCheckDate.getMonth() < date.getMonth()) {\n      return true;\n    }\n\n    if (toCheckDate.getMonth() === date.getMonth()) {\n      if (toCheckDate.getDate() < date.getDate()) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the given date is valid\n */\nexport function isValid(date: undefined | Date): date is Date {\n  return typeof date !== 'undefined' && date !== null && !isNaN(new Date(date as Date).getTime());\n}\n\n/**\n * Returns true if the given dates are equal\n */\nexport function isEqual(first: Date, second: Date): boolean {\n  return (\n    first.getFullYear() === second.getFullYear() &&\n    first.getMonth() === second.getMonth() &&\n    first.getDate() === second.getDate()\n  );\n}\n\n/**\n * Returns true if the given date falls inside the range\n */\nexport function isPartOfRange(rangeStart: Date, rangeEnd: Date, date: Date): boolean {\n  // if date lies in between the year\n  if (rangeStart.getFullYear() <= date.getFullYear() && date.getFullYear() <= rangeEnd.getFullYear()) {\n    // if year is in-between range year start and year end\n    if (rangeStart.getFullYear() < date.getFullYear() && date.getFullYear() < rangeEnd.getFullYear()) {\n      return true;\n    }\n\n    // if start year and end year are same\n    if (rangeStart.getFullYear() === rangeEnd.getFullYear()) {\n      if (rangeStart.getMonth() <= date.getMonth() && date.getMonth() <= rangeEnd.getMonth()) {\n        // if month is in-between month start and and moth end\n        if (rangeStart.getMonth() < date.getMonth() && date.getMonth() < rangeEnd.getMonth()) {\n          return true;\n        }\n\n        // if month start and month end are same\n        if (rangeStart.getMonth() === rangeEnd.getMonth()) {\n          if (\n            rangeStart.getDate() <= date.getDate() &&\n            date.getDate() <= rangeEnd.getDate() &&\n            date.getMonth() === rangeEnd.getMonth()\n          ) {\n            return true;\n          }\n          return false;\n        }\n\n        // if date is in start month\n        if (rangeStart.getMonth() === date.getMonth()) {\n          if (rangeStart.getDate() <= date.getDate()) {\n            return true;\n          }\n          return false;\n        }\n\n        // if date is in end month\n        if (rangeEnd.getMonth() === date.getMonth()) {\n          if (date.getDate() <= rangeEnd.getDate()) {\n            return true;\n          }\n          return false;\n        }\n\n        return false;\n      }\n      return false;\n    }\n\n    // if year is same as start year\n    if (rangeStart.getFullYear() === date.getFullYear()) {\n      // if month is greater than start month\n      if (date.getMonth() > rangeStart.getMonth()) {\n        return true;\n      }\n\n      // if month is same as start month\n      if (date.getMonth() === rangeStart.getMonth()) {\n        // if date is greater than range start date\n        if (date.getDate() >= rangeStart.getDate()) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    // if year is same as end year\n    if (rangeEnd.getFullYear() === date.getFullYear()) {\n      // if month is smaller than end month\n      if (date.getMonth() < rangeEnd.getMonth()) {\n        return true;\n      }\n\n      // if month is same as end month\n      if (date.getMonth() === rangeEnd.getMonth()) {\n        // if date is smaller than range end date\n        if (date.getDate() <= rangeEnd.getDate()) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    return false;\n  }\n  return false;\n}\n\n/**\n * Returns true if the given year is a leap year.\n * @param {number} year\n */\nexport function isALeapYear(year: number) {\n  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n}\n\n/**\n * Returns the number of days in the given month of the given year.\n * @param {number} year\n * @param {number} month\n */\nexport function getNumberOfDaysInAMonth(year: number, month: MonthIndices) {\n  const map: Record<MonthIndices, number> = {\n    0: 31,\n    1: isALeapYear(year) ? 29 : 28,\n    2: 31,\n    3: 30,\n    4: 31,\n    5: 30,\n    6: 31,\n    7: 31,\n    8: 30,\n    9: 31,\n    10: 30,\n    11: 31,\n  };\n\n  return map[month];\n}\n\n// WEEKDAY UTILS\n\n/**\n * Creates and return a new weekday index-label map as per the **start**\n * parameter. By default this will return the same weekday index-label map\n * used by the Date object.\n * 0 means Sun - if we follow the native Date convention\n * Now if someone wants to start their week from Mon, then 0 would mean Monday which is different from\n * the convention used by the Date methods.\n * @param startOfTheWeek index of the day to be considered as start of the week\n */\nexport function getWeekDaysIndexToLabelMapForAStartOfTheWeek(startOfTheWeek = 0): Record<WeekdayIndices, string> {\n  // we break [0,1,2,3,4,5,6] in two parts, startOfTheWeek = 3\n  // [startOfTheWeek,4,5,6] and [0,1,2] and join them with their labels\n  // this is just to re-order the label in the **correct order**\n  // i.e 0 becomes Wed although in native order 0 is Sunday\n  return Object.keys(NATIVE_INDEX_TO_LABEL_WEEKDAY_MAP)\n    .slice(startOfTheWeek, 7)\n    .concat(Object.keys(NATIVE_INDEX_TO_LABEL_WEEKDAY_MAP).slice(0, startOfTheWeek))\n    .reduce((acc, weekdayIndex, index) => {\n      // acc[0] = DEFAULT_WEEKDAY_INDEX[3]\n      acc[Number(index) as WeekdayIndices] = NATIVE_INDEX_TO_LABEL_WEEKDAY_MAP[Number(weekdayIndex) as WeekdayIndices];\n      return acc;\n    }, {} as Record<WeekdayIndices, string>);\n}\n\n/**\n * So if the Date object says that some date has 3 day-of-the-week. No this 3 means Wednesday as per the native index for week days.\n * But if a calendar starts from Monday, then wednesday will not be at 3 but it will be at some other index which is according to a different index-label map.\n * So this method returns that index for wednesday.\n * @param weekdayAsPerNativeIndex day-of-the-week as per the Date object\n * @param startOfTheWeek index of the day to be considered as start of the week\n */\nfunction getInfluencedWeekDayIndexAsPerAStartDay(weekdayAsPerNativeIndex: number, startOfTheWeek = 0): WeekdayIndices {\n  return (\n    weekdayAsPerNativeIndex >= startOfTheWeek\n      ? weekdayAsPerNativeIndex - startOfTheWeek\n      : 6 - startOfTheWeek + 1 + weekdayAsPerNativeIndex\n  ) as WeekdayIndices;\n}\n\n// {\n//   0: 'Mo',\n//   1: 'Tu',\n//   2: 'We',\n//   3: 'Th',\n//   4: 'Fr',\n//   5: 'Sa',\n//   6: 'Su'\n// };\n// start = 1\n// 6 - 1 = 5\n// influencedIndex = 3 (Thu)\n// 3 <= 5 so 3 + 1 = 4 (Thu) (native)\n// influencedIndex = 2 (Wed)\n// 2 <= 5 so 2 + 1 = 3 (Wed) (native)\n// influencedIndex = 5 (Sa)\n// 5 <= 5 so 5 + 1 = 6 (Sa) (native)\n// influencedIndex = 6 (Su)\n// 6 > 5 so ((6 - 5) - 1) = 0 (su) (native)\n\n// {\n//   0: 'Tu',\n//   1: 'We',\n//   2: 'Th',\n//   3: 'Fr',\n//   4: 'Sa',\n//   5: 'Su',\n//   6: 'Mo'\n// };\n// start = 2\n// 6 - 2 = 4\n// influencedIndex = 3 (Fr)\n// 3 <= 4 so 3 + 2 = 5 (Fr) (native)\n// influencedIndex = 2 (Th)\n// 2 <= 4 so 2 + 2 = 4 (Th) (native)\n// influencedIndex = 5 (Su)\n// 5 > 4 so ((5 - 4) - 1) = 0 (Su) (native)\n// influencedIndex = 6 (Mo)\n// 6 > 4 so ((6 - 4) - 1) = 1 (Mo) (native)\nfunction getNativeWeekDayIndexFromAStartDayInfluencedIndex(\n  weekdayAsPerChangedIndex: number,\n  startOfTheWeek: number\n): WeekdayIndices {\n  const diversion = 6 - startOfTheWeek;\n  return (\n    weekdayAsPerChangedIndex <= diversion\n      ? weekdayAsPerChangedIndex + startOfTheWeek\n      : weekdayAsPerChangedIndex - diversion - 1\n  ) as WeekdayIndices;\n}\n\n/**\n * Gives the index of day-of-the-week on the 1st of the provided month-year.\n * @param year Specify a year\n * @param month Specify a month\n * @param startOfTheWeek index of the day to be considered as start of the week\n */\nfunction getInfluencedWeekDayIndexOnFirstDateOfMonth(\n  year: number,\n  month: number,\n  startOfTheWeek: number\n): WeekdayIndices {\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  return getInfluencedWeekDayIndexAsPerAStartDay(date.getDay(), startOfTheWeek) as WeekdayIndices;\n}\n\n/**\n * Returns info about what indexes are weekend\n * @param startOfTheWeek index of the day to be considered as start of the week\n */\nexport function getWeekendInfo(startOfTheWeek: number): WeekdayIndices[] {\n  if (startOfTheWeek === 0) {\n    return [6, 0];\n  } else if (startOfTheWeek === 1) {\n    return [5, 6];\n  } else if (startOfTheWeek === 2) {\n    return [4, 5];\n  } else if (startOfTheWeek === 3) {\n    return [3, 4];\n  } else if (startOfTheWeek === 4) {\n    return [2, 3];\n  } else if (startOfTheWeek === 5) {\n    return [1, 2];\n  } else {\n    return [0, 1];\n  }\n}\n\nexport function getPreviousMonth(month: MonthIndices): MonthIndices {\n  return month === 0 ? 11 : ((month - 1) as MonthIndices);\n}\n\nexport function getNextMonth(month: MonthIndices): MonthIndices {\n  return month === 11 ? 0 : ((month + 1) as MonthIndices);\n}\n\nexport function getPreviousYear(year: number): number {\n  return year === 1 ? 1 : year - 1;\n}\n\nexport function getNextYear(year: number): number {\n  return year + 1;\n}\n\n// 1 - 20 (20 years in one range block)\n// 21 - 40\n// so if you provide 3 then the start of raange for 3 would be\n// 1 since it belongs to the 1-20 year range.\nexport function getStartOfRangeForAYear(year: number) {\n  // last cell will always be a perfect multiple of 20\n  // take 2016 as an example\n  if (year % 20 === 0) {\n    return 20 * (year / 20 - 1) + 1;\n  }\n  // logic derived from a few examples like 2021, 1981, 1973\n  return 20 * Number((year / 20).toFixed(0)) + 1;\n}\n\n/**\n * Returns matrix for the month select view.\n * @param selectedMonth\n */\nexport function getMonthViewMetrix(selectedMonth: number): Array<MonthCell>[] {\n  const months = Array.from({ length: 12 }, (v, k) => {\n    return {\n      month: k as MonthIndices,\n      isCurrentMonth: new Date().getMonth() === k,\n      isSelectedMonth: selectedMonth === k,\n    };\n  });\n  return [months.slice(0, 3), months.slice(3, 6), months.slice(6, 9), months.slice(9, 12)];\n}\n\nexport function getPreviousRangeStartingYear(rangeStartYear: number) {\n  if (rangeStartYear === 1) {\n    return 1;\n  }\n  return getStartOfRangeForAYear(rangeStartYear - 1);\n}\n\nexport function getNextRangeStartingYear(rangeStartYear: number) {\n  return getStartOfRangeForAYear(rangeStartYear + 20);\n}\n\nexport function getYearRangeLimits(rangeStartYear: number) {\n  return [rangeStartYear, rangeStartYear + 19];\n}\n\nexport function getYearsViewMetrix(rangeStartYear: number, selectedYear: number): Array<YearCell>[] {\n  const years = Array.from({ length: 20 }, (v, index) => {\n    return {\n      year: rangeStartYear + index,\n      isCurrentYear: new Date().getFullYear() === rangeStartYear + index,\n      isSelectedYear: selectedYear === rangeStartYear + index,\n    };\n  });\n  return [years.slice(0, 5), years.slice(5, 10), years.slice(10, 15), years.slice(15, 20)];\n}\n\nexport function validateAndReturnDateFormatter(format: string) {\n  const partsMap: Record<'YYYY' | 'MM' | 'DD', boolean> = { YYYY: true, MM: true, DD: true };\n  const parts = format.split('-') as ('YYYY' | 'MM' | 'DD')[];\n  if (parts.length !== 3) {\n    throw new Error('Date format is invalid.');\n  }\n  if (!parts.every((part) => partsMap[part])) {\n    throw new Error('Date format uses unknown parts.');\n  }\n  return (year: number, month: number, date: number, separator: string): string => {\n    let string = '';\n    parts.forEach((part, index) => {\n      if (part === 'YYYY') {\n        string += year;\n      }\n      if (part === 'MM') {\n        string += month;\n      }\n      if (part === 'DD') {\n        string += date;\n      }\n      if (index !== 2) {\n        string += separator;\n      }\n    });\n    return string;\n  };\n}\n\nfunction checkIfDateIsDisabledHOF(params: CheckIfDateIsDisabledHOFParams) {\n  const { disablePast, disableToday, disableFuture, customDisabledCheck, maxDate, minDate, applyMax, applyMin } =\n    params;\n\n  const date = new Date();\n  const dayOfMonth = date.getDate();\n  const currentYear = date.getFullYear();\n  const currentMonth = date.getMonth();\n\n  return function checkIfDateIsDisabled(year: number, month: MonthIndices, date: number, weekday: WeekdayIndices) {\n    if (disablePast) {\n      if (year < currentYear) {\n        return true;\n      }\n\n      if (year === currentYear && month < currentMonth) {\n        return true;\n      }\n\n      if (year === currentYear && month === currentMonth && date < dayOfMonth) {\n        return true;\n      }\n    }\n    if (disableToday) {\n      if (year === currentYear && month === currentMonth && date === dayOfMonth) {\n        return true;\n      }\n    }\n    if (disableFuture) {\n      if (year > currentYear) {\n        return true;\n      }\n\n      if (year === currentYear && month > currentMonth) {\n        return true;\n      }\n\n      if (year === currentYear && month === currentMonth && date > dayOfMonth) {\n        return true;\n      }\n    }\n\n    if (applyMax) {\n      if (isBefore(new Date(year, month, date), maxDate)) {\n        return true;\n      }\n    }\n\n    if (applyMin) {\n      if (isBefore(minDate, new Date(year, month, date))) {\n        return true;\n      }\n    }\n\n    if (typeof customDisabledCheck === 'function') {\n      return customDisabledCheck({\n        year: year,\n        month: month,\n        weekday: weekday,\n        date: date,\n      });\n    }\n\n    return false;\n  };\n}\n\nexport function getDaysOfMonthViewMetrix(params: GetDaysOfMonthViewMetrixParams): Array<DayOfMonthCell>[] {\n  const {\n    isRangeSelectModeOn,\n    isRangeView,\n    selectedDate,\n    selectedRangeStart,\n    selectedRangeEnd,\n    highlightsMap,\n    newSelectedRangeStart,\n    newSelectedRangeEnd,\n    isSelectMultiDate,\n    selectedMultiDates,\n    weekendIndexes,\n    yearInView,\n    monthInView,\n    startOfTheWeek,\n    disableFuture = false,\n    disablePast = false,\n    disableToday = false,\n    maxDate,\n    minDate,\n    applyMax,\n    applyMin,\n    isDisabled,\n  } = params;\n\n  const matrix: Array<DayOfMonthCell>[] = [[], [], [], [], [], []];\n\n  const currentMonthDatesStartIndex = getInfluencedWeekDayIndexOnFirstDateOfMonth(\n    yearInView,\n    monthInView,\n    startOfTheWeek\n  );\n\n  const weekends = weekendIndexes;\n\n  const checkDisabledForADate = checkIfDateIsDisabledHOF({\n    disablePast,\n    disableToday,\n    disableFuture,\n    customDisabledCheck: isDisabled,\n    maxDate,\n    minDate,\n    applyMax,\n    applyMin,\n  });\n\n  const today = new Date();\n  const todaysDate = today.getDate();\n  const todaysMonth = today.getMonth();\n  const todaysYear = today.getFullYear();\n  const totalDaysInCurrentMonth = getNumberOfDaysInAMonth(yearInView, monthInView);\n\n  const isPrevMonthFromLastYear = monthInView === 0;\n  const isCurrentMonthLast = monthInView === 11;\n\n  const totalDaysInPrevMonth = getNumberOfDaysInAMonth(\n    isPrevMonthFromLastYear ? getPreviousYear(yearInView) : yearInView,\n    getPreviousMonth(monthInView)\n  );\n\n  // calendar has 6 rows (0 - 5)\n  let row = 0;\n  let weekColumn: WeekdayIndices = 0;\n\n  //  31 - (6 - 1) === 26\n  const lastMonthDateStartFrom = totalDaysInPrevMonth - (currentMonthDatesStartIndex - 1);\n\n  // first loop to fill cell values of last month\n  for (let date = lastMonthDateStartFrom; date <= totalDaysInPrevMonth; date++) {\n    if (weekColumn === 7) {\n      weekColumn = 0;\n      row++;\n    }\n    const currMonth = getPreviousMonth(monthInView);\n    const currYear = isPrevMonthFromLastYear ? getPreviousYear(yearInView) : yearInView;\n\n    const currDate = new Date(currYear, currMonth, date);\n\n    // if new range dates are VALID\n    // then use them to compute in range values\n\n    matrix[row].push({\n      date: date,\n      month: currMonth,\n      activeMonthInView: false,\n      isHighlight: highlightsMap[toString(currDate)] === 1,\n      isInRange: isRangeView\n        ? isRangeSelectModeOn\n          ? isValid(newSelectedRangeStart) && isValid(newSelectedRangeEnd)\n            ? isBefore(newSelectedRangeEnd, newSelectedRangeStart)\n              ? isPartOfRange(newSelectedRangeStart, newSelectedRangeEnd, currDate)\n              : isPartOfRange(newSelectedRangeEnd, newSelectedRangeStart, currDate)\n            : false\n          : isPartOfRange(selectedRangeStart, selectedRangeEnd, currDate)\n        : false,\n      isRangeStart: isRangeView\n        ? isRangeSelectModeOn\n          ? isValid(newSelectedRangeStart)\n            ? isEqual(newSelectedRangeStart, currDate)\n            : false\n          : isEqual(selectedRangeStart, currDate)\n        : false,\n      isRangeEnd: isRangeView ? (isRangeSelectModeOn ? false : isEqual(selectedRangeEnd, currDate)) : false,\n      year: currYear,\n      isWeekend: typeof weekends.find((c) => c === weekColumn) === 'number' ? true : false,\n      dayOfWeek: getNativeWeekDayIndexFromAStartDayInfluencedIndex(weekColumn, startOfTheWeek),\n      isToday: date === todaysDate && currMonth === todaysMonth && currYear === todaysYear,\n      isFirstRow: row === 0,\n      isLastRow: row === 5,\n      isFirsColumn: weekColumn === 0,\n      isLastColumn: weekColumn === 6,\n      isSelected: isSelectMultiDate\n        ? !!selectedMultiDates[toString(currDate)]\n        : isRangeView\n        ? false\n        : currMonth === selectedDate.getMonth() &&\n          currYear === selectedDate.getFullYear() &&\n          date === selectedDate.getDate(),\n      // not modified\n      isDisabled: checkDisabledForADate(\n        currYear,\n        currMonth,\n        date,\n        getNativeWeekDayIndexFromAStartDayInfluencedIndex(weekColumn, startOfTheWeek)\n      ),\n    });\n    weekColumn++;\n  }\n\n  // second loop to fill cell values of current month\n  for (let date = 1; date <= totalDaysInCurrentMonth; date++) {\n    if (weekColumn === 7) {\n      weekColumn = 0;\n      row++;\n    }\n    const currMonth = monthInView;\n    const currYear = yearInView;\n    const isToday = date === todaysDate && monthInView === todaysMonth && yearInView === todaysYear;\n\n    const currDate = new Date(currYear, currMonth, date);\n\n    matrix[row].push({\n      date: date,\n      month: currMonth,\n      activeMonthInView: true,\n      isHighlight: highlightsMap[toString(currDate)] === 1,\n      isInRange: isRangeView\n        ? isRangeSelectModeOn\n          ? isValid(newSelectedRangeStart) && isValid(newSelectedRangeEnd)\n            ? isBefore(newSelectedRangeEnd, newSelectedRangeStart)\n              ? isPartOfRange(newSelectedRangeStart, newSelectedRangeEnd, currDate)\n              : isPartOfRange(newSelectedRangeEnd, newSelectedRangeStart, currDate)\n            : false\n          : isPartOfRange(selectedRangeStart, selectedRangeEnd, currDate)\n        : false,\n      isRangeStart: isRangeView\n        ? isRangeSelectModeOn\n          ? isValid(newSelectedRangeStart)\n            ? isEqual(newSelectedRangeStart, currDate)\n            : false\n          : isEqual(selectedRangeStart, currDate)\n        : false,\n      isRangeEnd: isRangeView ? (isRangeSelectModeOn ? false : isEqual(selectedRangeEnd, currDate)) : false,\n      year: currYear,\n      dayOfWeek: getNativeWeekDayIndexFromAStartDayInfluencedIndex(weekColumn, startOfTheWeek),\n      isWeekend: typeof weekends.find((c) => c === weekColumn) === 'number' ? true : false,\n      isToday: isToday,\n      isFirstRow: row === 0,\n      isLastRow: row === 5,\n      isFirsColumn: weekColumn === 0,\n      isLastColumn: weekColumn === 6,\n      isSelected: isSelectMultiDate\n        ? !!selectedMultiDates[toString(currDate)]\n        : isRangeView\n        ? false\n        : currMonth === selectedDate.getMonth() &&\n          currYear === selectedDate.getFullYear() &&\n          date === selectedDate.getDate(),\n      isDisabled: checkDisabledForADate(\n        currYear,\n        currMonth,\n        date,\n        getNativeWeekDayIndexFromAStartDayInfluencedIndex(weekColumn, startOfTheWeek)\n      ),\n    });\n    weekColumn++;\n  }\n\n  let date = 1;\n  // last loop to fill cell values of next month\n\n  while (matrix[5].length < 7) {\n    if (weekColumn === 7) {\n      weekColumn = 0;\n      row++;\n    }\n    const currMonth = getNextMonth(monthInView);\n    const currYear = isCurrentMonthLast ? yearInView + 1 : yearInView;\n\n    const currDate = new Date(currYear, currMonth, date);\n\n    matrix[row].push({\n      date: date,\n      month: currMonth,\n      activeMonthInView: false,\n      isHighlight: highlightsMap[toString(currDate)] === 1,\n      isInRange: isRangeView\n        ? isRangeSelectModeOn\n          ? isValid(newSelectedRangeStart) && isValid(newSelectedRangeEnd)\n            ? isBefore(newSelectedRangeEnd, newSelectedRangeStart)\n              ? isPartOfRange(newSelectedRangeStart, newSelectedRangeEnd, currDate)\n              : isPartOfRange(newSelectedRangeEnd, newSelectedRangeStart, currDate)\n            : false\n          : isPartOfRange(selectedRangeStart, selectedRangeEnd, currDate)\n        : false,\n      isRangeStart: isRangeView\n        ? isRangeSelectModeOn\n          ? isValid(newSelectedRangeStart)\n            ? isEqual(newSelectedRangeStart, currDate)\n            : false\n          : isEqual(selectedRangeStart, currDate)\n        : false,\n      isRangeEnd: isRangeView ? (isRangeSelectModeOn ? false : isEqual(selectedRangeEnd, currDate)) : false,\n      year: currYear,\n      dayOfWeek: getNativeWeekDayIndexFromAStartDayInfluencedIndex(weekColumn, startOfTheWeek),\n      isWeekend: typeof weekends.find((c) => c === weekColumn) === 'number' ? true : false,\n      isToday: date === todaysDate && currMonth === todaysMonth && currYear === todaysYear,\n      isFirstRow: row === 0,\n      isLastRow: row === 5,\n      isFirsColumn: weekColumn === 0,\n      isLastColumn: weekColumn === 6,\n      isSelected: isSelectMultiDate\n        ? !!selectedMultiDates[toString(currDate)]\n        : isRangeView\n        ? false\n        : currMonth === selectedDate.getMonth() &&\n          currYear === selectedDate.getFullYear() &&\n          date === selectedDate.getDate(),\n      isDisabled: checkDisabledForADate(\n        currYear,\n        currMonth,\n        date,\n        getNativeWeekDayIndexFromAStartDayInfluencedIndex(weekColumn, startOfTheWeek)\n      ),\n    });\n    weekColumn++;\n    date++;\n  }\n\n  return matrix;\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport type { DayOfMonthCell, IsDisabledParams, MonthCell, MonthIndices, YearCell, WeekdayIndices } from './types';\n\nimport {\n  getWeekDaysIndexToLabelMapForAStartOfTheWeek,\n  getStartOfRangeForAYear,\n  getPreviousYear,\n  getPreviousMonth,\n  getPreviousRangeStartingYear,\n  getNextYear,\n  getNextMonth,\n  getNextRangeStartingYear,\n  getYearsViewMetrix,\n  getMonthViewMetrix,\n  getDaysOfMonthViewMetrix,\n  getYearRangeLimits,\n  validateAndReturnDateFormatter,\n  getWeekendInfo,\n  isValid,\n  isBefore,\n  toString,\n  addDays,\n} from './date-utils';\n\nimport { NATIVE_INDEX_TO_LABEL_MONTHS_MAP } from './constants';\n\ninterface Value {\n  value: Date;\n  formatted: string;\n}\n\ntype RangeValue = [Value, Value];\ntype MultiValue = Value[];\n\ninterface Props {\n  /**\n   * The initial month and year that will be shown to the user.\n   * By default it shows today's date month and year. If a date is selected it shows the selected\n   * date's month and year.\n   */\n  initialViewDate?: Date;\n  /**\n   * Value of a single date or an array of dates in ISO format.\n   * Only applicable if selectRange is false\n   */\n  value?: Date | Date[];\n  /**\n   * Renders a multiple dates selector view\n   */\n  isMultiSelector?: boolean;\n  /**\n   * Renders a range selector UI for the calendar\n   */\n  isRangeSelector?: boolean;\n  /**\n   * Always select n number of days starting from the user's selected date\n   */\n  fixedRange?: number;\n  /**\n   * Start date of the date range.\n   * Only applicable if selectRange is true.\n   */\n  rangeStart?: Date;\n  /**\n   * End date of the date range.\n   * Only applicable if selectRange is true.\n   */\n  rangeEnd?: Date;\n  /**\n   * Array of weekday number that are part of weekend.\n   * The weekday number depends on the start of the week if provided one.\n   * By default this is [6, 0] which Saturday, Sunday respectively as per the 0 based start of the week.\n   */\n  weekends?: WeekdayIndices[];\n  /**\n   * By default the calendar starts from Sun which is represented in JS as 0 index.\n   * You can provide the index for any other day that you want as start of the week.\n   */\n  startOfWeek?: WeekdayIndices;\n  /**\n   * Separator to be used when formatting the date string.\n   * Default is '-' i.e 'DD-MM-YYYY'\n   */\n  separator?: string;\n  /**\n   * A combination of YYYY-MM-DD.\n   * Eg. MM-DD-YYYY, DD-MM-YYYY etc.\n   * Default is '-' i.e 'DD-MM-YYYY'\n   */\n  format?: string;\n  /**\n   * A boolean flag to disable all past dates.\n   */\n  disablePast?: boolean;\n  /**\n   * A boolean flag to disable today's date.\n   */\n  disableToday?: boolean;\n  /**\n   * A boolean flag to disable all future dates.\n   */\n  disableFuture?: boolean;\n  /**\n   * A callback function that can be used to disable specific dates on the calendar.\n   */\n  isDisabled?: (params: IsDisabledParams) => boolean;\n  /**\n   * User will not be able to select past this date. This date will be selectable.\n   */\n  maxAllowedDate?: Date;\n  /**\n   * User will not be able to select before this date. This date will be selectable.\n   */\n  minAllowedDate?: Date;\n  /**\n   * These dates will be highlighted\n   */\n  highlights?: Date[];\n  /**\n   * OnChange callback functionn.\n   */\n  onChange?: (value: Value | MultiValue | RangeValue) => any | Promise<any>;\n}\n\n// Add an option to freeze ui if date is invalid\n// Add a isEditable option\n// Change is in range to could be in range as a class rather than hover\n// dont show range hover on diabalbed\n\nfunction Calendar({\n  value,\n  isMultiSelector,\n  isRangeSelector,\n  weekends,\n  highlights = [],\n  rangeStart: rangeStartValue,\n  initialViewDate,\n  rangeEnd: rangeEndValue,\n  startOfWeek = 1,\n  maxAllowedDate,\n  minAllowedDate,\n  fixedRange,\n  isDisabled,\n  onChange,\n  separator = '-',\n  format = 'DD-MM-YYYY',\n  disableFuture = false,\n  disablePast = false,\n  disableToday = false,\n}: Props) {\n  const [today] = useState(new Date());\n\n  const [isRangeSelectorView] = useState(!!isRangeSelector);\n\n  const [isMultiSelectorView] = useState(!isRangeSelectorView && !!isMultiSelector);\n\n  const [isFixedRangeView] = useState(\n    isRangeSelectorView && typeof fixedRange === 'number' && fixedRange > 0 ? true : false\n  );\n\n  const [isNormalView] = useState(!isRangeSelectorView && !isMultiSelectorView);\n\n  if (isNormalView && Array.isArray(value)) {\n    throw new Error('`value` should an instance of the Date class. Provided value is an Array.');\n  }\n\n  const [fixedRangeLength] = useState(isFixedRangeView ? (fixedRange as number) : 1);\n\n  // is range select mode on\n  const [isRangeSelectModeOn, setIsRangeSelectModeOn] = useState(false);\n\n  const [highlightsMap] = useState<Record<string, 1>>(() => {\n    if (Array.isArray(highlights)) {\n      return highlights\n        .filter((d) => isValid(d))\n        .reduce((acc, curr) => {\n          acc[toString(curr)] = 1;\n          return acc;\n        }, {} as Record<string, 1>);\n    }\n    return {};\n  });\n\n  // start day of the week\n  const [startOfTheWeek] = useState(startOfWeek);\n\n  const [weekendIndexes] = useState(() => {\n    return Array.isArray(weekends) && weekends.every((num) => typeof num === 'number')\n      ? weekends\n      : getWeekendInfo(startOfTheWeek);\n  });\n\n  // week days as per the start day of the week\n  const weekDays = useMemo(() => {\n    return getWeekDaysIndexToLabelMapForAStartOfTheWeek(startOfTheWeek);\n  }, [startOfTheWeek]);\n\n  // date formatter\n  const formatter = useMemo(() => {\n    return validateAndReturnDateFormatter(format);\n  }, [format]);\n\n  // selected single date\n  const [selectedDate, setSelectedDate] = useState(() => {\n    if (isNormalView && isValid(value as Date)) {\n      const year = (value as Date).getFullYear();\n      const month = (value as Date).getMonth();\n      const dateOfMonth = (value as Date).getDate();\n      return new Date(year, month, dateOfMonth);\n    } else {\n      return today;\n    }\n  });\n\n  // selected multi dates\n  const [selectedMultiDates, setSelectedMultiDates] = useState<Record<string, Date | undefined>>(() => {\n    if (isMultiSelectorView && Array.isArray(value) && value.every(isValid)) {\n      return value.reduce((acc, currDate) => {\n        if (isValid(currDate)) {\n          acc[toString(currDate)] = currDate;\n        }\n        return acc;\n      }, {} as Record<string, Date | undefined>);\n    } else {\n      return {} as Record<string, Date | undefined>;\n    }\n  });\n\n  // selected range start date\n  const [selectedRangeStart, setSelectedRangeStart] = useState(() => {\n    if (isRangeSelectorView && isValid(rangeStartValue)) {\n      const year = rangeStartValue.getFullYear();\n      const month = rangeStartValue.getMonth();\n      const date = rangeStartValue.getDate();\n      return new Date(year, month, date);\n    } else {\n      return today;\n    }\n  });\n\n  const [selectedRangeEnd, setSelectedRangeEnd] = useState(() => {\n    if (isRangeSelectorView && isValid(rangeEndValue) && isBefore(rangeEndValue, selectedRangeStart)) {\n      const year = rangeEndValue.getFullYear();\n      const month = rangeEndValue.getMonth();\n      const date = rangeEndValue.getDate();\n      return new Date(year, month, date);\n    } else if (isFixedRangeView) {\n      return addDays(selectedRangeStart, fixedRangeLength);\n    } else {\n      return addDays(selectedRangeStart, 2);\n    }\n  });\n\n  const [newSelectedRangeStart, setNewSelectedRangeStart] = useState<Date | undefined>(() => {\n    return selectedRangeStart;\n  });\n\n  const [newSelectedRangeEnd, setNewSelectedRangeEnd] = useState<Date | undefined>(() => {\n    return selectedRangeEnd;\n  });\n\n  // View States\n  const [view, setView] = useState<'years' | 'months' | 'month_dates'>('month_dates');\n\n  const [monthInView, setMonthInView] = useState<MonthIndices>(\n    (isValid(initialViewDate)\n      ? initialViewDate.getMonth()\n      : isNormalView && isValid(value as Date)\n      ? (value as Date).getMonth()\n      : isRangeSelectorView\n      ? selectedRangeStart.getMonth()\n      : today.getMonth()) as MonthIndices\n  );\n\n  const [yearInView, setYearInView] = useState(\n    isValid(initialViewDate)\n      ? initialViewDate.getFullYear()\n      : isNormalView && isValid(value as Date)\n      ? (value as Date).getFullYear()\n      : isRangeSelectorView\n      ? selectedRangeStart.getFullYear()\n      : today.getFullYear()\n  );\n\n  const [startingYearForCurrRange, setStartingYearForCurrRange] = useState(getStartOfRangeForAYear(yearInView));\n\n  useEffect(() => {\n    setStartingYearForCurrRange(getStartOfRangeForAYear(yearInView));\n  }, [yearInView, setStartingYearForCurrRange]);\n\n  // max allowed Date\n  const [maxDate] = useState(() => {\n    return isValid(maxAllowedDate) ? maxAllowedDate : today;\n  });\n  const [applyMaxConstraint] = useState(() => {\n    return isValid(maxAllowedDate)\n      ? isValid(minAllowedDate)\n        ? isBefore(maxAllowedDate, minAllowedDate)\n        : true\n      : false;\n  });\n\n  // min allowed Date\n  const [minDate] = useState(() => {\n    return isValid(minAllowedDate) ? minAllowedDate : today;\n  });\n\n  const [applyminConstraint] = useState(() => {\n    return isValid(minAllowedDate)\n      ? isValid(maxAllowedDate)\n        ? isBefore(maxAllowedDate, minAllowedDate)\n        : true\n      : false;\n  });\n\n  // 1 - 20, 21 - 40\n  const [yearMatrixRangeStart, yearMatrixRangeEnd] = useMemo(() => {\n    return getYearRangeLimits(startingYearForCurrRange);\n  }, [startingYearForCurrRange]);\n\n  // matrices for different views\n  const yearsViewMatrix = useMemo<YearCell[][]>(() => {\n    return getYearsViewMetrix(startingYearForCurrRange, selectedDate.getFullYear());\n  }, [startingYearForCurrRange, selectedDate]);\n\n  const monthsViewMatrix = useMemo<MonthCell[][]>(() => {\n    return getMonthViewMetrix(selectedDate.getMonth());\n  }, [selectedDate]);\n\n  const daysOfMMonthViewMatrix = useMemo(() => {\n    return getDaysOfMonthViewMetrix({\n      selectedDate: selectedDate,\n      selectedRangeStart: selectedRangeStart,\n      selectedRangeEnd: selectedRangeEnd,\n      newSelectedRangeStart: newSelectedRangeStart,\n      newSelectedRangeEnd: newSelectedRangeEnd,\n      isRangeView: isRangeSelectorView || isFixedRangeView,\n      isRangeSelectModeOn,\n      weekendIndexes,\n      selectedMultiDates,\n      highlightsMap,\n      isSelectMultiDate: isMultiSelectorView,\n      yearInView,\n      monthInView,\n      startOfTheWeek,\n      disableFuture,\n      disablePast,\n      disableToday,\n      isDisabled,\n      maxDate: maxDate,\n      minDate: minDate,\n      applyMax: applyMaxConstraint,\n      applyMin: applyminConstraint,\n    });\n  }, [\n    selectedDate,\n    selectedRangeStart,\n    selectedRangeEnd,\n    newSelectedRangeStart,\n    newSelectedRangeEnd,\n    isRangeSelectorView,\n    isFixedRangeView,\n    isRangeSelectModeOn,\n    weekendIndexes,\n    selectedMultiDates,\n    highlightsMap,\n    isMultiSelectorView,\n    yearInView,\n    monthInView,\n    startOfTheWeek,\n    disableFuture,\n    disablePast,\n    disableToday,\n    isDisabled,\n    maxDate,\n    minDate,\n    applyMaxConstraint,\n    applyminConstraint,\n  ]);\n\n  // callback handlers\n  const onPrevClick = useCallback(\n    (e) => {\n      if (view === 'month_dates') {\n        const isPrevMonthFromLastYear = monthInView === 0;\n        if (isPrevMonthFromLastYear) {\n          setYearInView(getPreviousYear(yearInView));\n        }\n        setMonthInView(getPreviousMonth(monthInView));\n      }\n      if (view === 'years') {\n        setStartingYearForCurrRange(getPreviousRangeStartingYear(startingYearForCurrRange));\n      }\n      if (view === 'months') {\n        setYearInView(yearInView !== 1 ? yearInView - 1 : 1);\n      }\n    },\n    [\n      setMonthInView,\n      monthInView,\n      setYearInView,\n      yearInView,\n      view,\n      setStartingYearForCurrRange,\n      startingYearForCurrRange,\n    ]\n  );\n\n  const onNextClick = useCallback(\n    (e) => {\n      if (view === 'month_dates') {\n        const isCurrentMonthLast = monthInView === 11;\n        if (isCurrentMonthLast) {\n          setYearInView(getNextYear(yearInView));\n        }\n        setMonthInView(getNextMonth(monthInView));\n      }\n      if (view === 'years') {\n        setStartingYearForCurrRange(getNextRangeStartingYear(startingYearForCurrRange));\n      }\n\n      if (view === 'months') {\n        setYearInView(getNextYear(yearInView));\n      }\n    },\n    [\n      setMonthInView,\n      monthInView,\n      setYearInView,\n      yearInView,\n      view,\n      setStartingYearForCurrRange,\n      startingYearForCurrRange,\n    ]\n  );\n\n  const onDateClicked = useCallback(\n    (cell: DayOfMonthCell) => {\n      const clickedDate = new Date(cell.year, cell.month, cell.date);\n\n      if (isRangeSelectorView && !isFixedRangeView) {\n        if (isRangeSelectModeOn && newSelectedRangeStart) {\n          // check if it is the first click or seconds\n\n          const previouslySelectedDate = new Date(\n            newSelectedRangeStart.getFullYear(),\n            newSelectedRangeStart.getMonth(),\n            newSelectedRangeStart.getDate()\n          );\n\n          if (isBefore(previouslySelectedDate, clickedDate)) {\n            setSelectedRangeStart(clickedDate);\n            setSelectedRangeEnd(previouslySelectedDate);\n\n            const startDate = clickedDate;\n\n            const endDate = previouslySelectedDate;\n\n            onChange &&\n              onChange([\n                {\n                  value: startDate,\n                  formatted: formatter(\n                    startDate.getFullYear(),\n                    startDate.getMonth() + 1,\n                    startDate.getDate(),\n                    separator\n                  ),\n                },\n                {\n                  value: endDate,\n                  formatted: formatter(endDate.getFullYear(), endDate.getMonth() + 1, endDate.getDate(), separator),\n                },\n              ]);\n          } else {\n            setSelectedRangeStart(previouslySelectedDate);\n\n            setSelectedRangeEnd(clickedDate);\n\n            const startDate = previouslySelectedDate;\n\n            const endDate = clickedDate;\n\n            onChange &&\n              onChange([\n                {\n                  value: startDate,\n                  formatted: formatter(\n                    startDate.getFullYear(),\n                    startDate.getMonth() + 1,\n                    startDate.getDate(),\n                    separator\n                  ),\n                },\n                {\n                  value: endDate,\n                  formatted: formatter(endDate.getFullYear(), endDate.getMonth() + 1, endDate.getDate(), separator),\n                },\n              ]);\n          }\n\n          setNewSelectedRangeEnd(undefined);\n\n          setIsRangeSelectModeOn(false);\n        } else {\n          // select first date\n          setNewSelectedRangeStart(clickedDate);\n\n          setNewSelectedRangeEnd(undefined);\n\n          setIsRangeSelectModeOn(true);\n        }\n      } else if (isFixedRangeView) {\n        setSelectedRangeStart(clickedDate);\n        const endDate = addDays(clickedDate, fixedRangeLength);\n        setSelectedRangeEnd(endDate);\n        onChange &&\n          onChange([\n            {\n              value: clickedDate,\n              formatted: formatter(\n                clickedDate.getFullYear(),\n                clickedDate.getMonth() + 1,\n                clickedDate.getDate(),\n                separator\n              ),\n            },\n            {\n              value: endDate,\n              formatted: formatter(endDate.getFullYear(), endDate.getMonth() + 1, endDate.getDate(), separator),\n            },\n          ]);\n      } else if (isMultiSelectorView) {\n        const date = new Date(cell.year, cell.month, cell.date);\n        const stringkey = toString(date);\n\n        const newselectedMultiDates = { ...selectedMultiDates };\n\n        if (!!selectedMultiDates[stringkey]) {\n          newselectedMultiDates[stringkey] = undefined;\n        } else {\n          newselectedMultiDates[stringkey] = date;\n        }\n\n        setSelectedMultiDates(newselectedMultiDates);\n\n        onChange &&\n          onChange(\n            Object.keys(newselectedMultiDates)\n              .filter((dk) => !!newselectedMultiDates[dk])\n              .map((dk) => ({\n                value: newselectedMultiDates[dk] as Date,\n                year: (newselectedMultiDates[dk] as Date).getFullYear(),\n                month: (newselectedMultiDates[dk] as Date).getMonth(),\n                date: (newselectedMultiDates[dk] as Date).getDate(),\n                formatted: formatter(\n                  (newselectedMultiDates[dk] as Date).getFullYear(),\n                  (newselectedMultiDates[dk] as Date).getMonth() + 1,\n                  (newselectedMultiDates[dk] as Date).getDate(),\n                  separator\n                ),\n              }))\n          );\n      } else {\n        setSelectedDate(clickedDate);\n\n        onChange &&\n          onChange({\n            value: clickedDate,\n            formatted: formatter(\n              clickedDate.getFullYear(),\n              clickedDate.getMonth() + 1,\n              clickedDate.getDate(),\n              separator\n            ),\n          });\n      }\n\n      setMonthInView(cell.month);\n      setYearInView(cell.year);\n    },\n    [\n      isRangeSelectorView,\n      isMultiSelectorView,\n      isFixedRangeView,\n      isRangeSelectModeOn,\n      newSelectedRangeStart,\n      onChange,\n      formatter,\n      separator,\n      selectedMultiDates,\n      fixedRangeLength,\n    ]\n  );\n\n  return (\n    <section className='arc'>\n      <header className='arc_header'>\n        <button className='arc_header_nav arc_header_nav-prev' onClick={onPrevClick}>\n          ←\n        </button>\n        {view === 'month_dates' ? (\n          <button className='arc_header_label arc_header_label-days-of-month' onClick={() => setView('years')}>\n            <div>\n              <span>{NATIVE_INDEX_TO_LABEL_MONTHS_MAP[monthInView]}</span>\n            </div>\n            <div>\n              <span>{yearInView}</span>\n            </div>\n          </button>\n        ) : view === 'months' ? (\n          <button className='arc_header_label arc_header_label-months'>\n            <div onClick={() => setView('years')}>\n              <span>{yearInView}</span>\n            </div>\n          </button>\n        ) : (\n          <button className='arc_header_label arc_header_label-years' onClick={() => setView('month_dates')}>\n            <div>\n              <span>\n                {yearMatrixRangeStart}-{yearMatrixRangeEnd}\n              </span>\n            </div>\n          </button>\n        )}\n        <button className='arc_header_nav arc_header_nav-next' onClick={onNextClick}>\n          →\n        </button>\n      </header>\n      <main className='arc_view'>\n        {view === 'months' && (\n          <div className='arc_view-months'>\n            {monthsViewMatrix.map((row, index) => (\n              <div className='arc_view_row' key={index}>\n                {row.map((cell) => (\n                  <div className={`arc_view_cell${cell.isCurrentMonth ? ' arc_this_month' : ''}`} key={cell.month}>\n                    <button\n                      onClick={() => {\n                        setMonthInView(cell.month);\n                        setView('month_dates');\n                      }}>\n                      {NATIVE_INDEX_TO_LABEL_MONTHS_MAP[cell.month]}\n                    </button>\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n        )}\n        {view === 'years' && (\n          <div className='arc_view-years'>\n            {yearsViewMatrix.map((row, index) => (\n              <div className='arc_view_row' key={index}>\n                {row.map((cell) => (\n                  <div className={`arc_view_cell${cell.isCurrentYear ? ' arc_this_year' : ''}`} key={cell.year}>\n                    <button\n                      onClick={() => {\n                        setYearInView(cell.year);\n                        setView('months');\n                      }}>\n                      {cell.year}\n                    </button>\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n        )}\n        {view === 'month_dates' && (\n          <>\n            <ul className='arc_view_weekdays'>\n              {Object.keys(weekDays).map((weekDay) => (\n                <li\n                  key={weekDay}\n                  className={`arc_view_weekdays_cell${\n                    typeof weekendIndexes.find((weekend) => weekend === Number(weekDay)) === 'number' ? ' arc_wknd' : ''\n                  }`}>\n                  <span>{weekDays[Number(weekDay) as WeekdayIndices]}</span>\n                </li>\n              ))}\n            </ul>\n            <div className='arc_view-days-of-month' role='grid'>\n              {daysOfMMonthViewMatrix.map((row, index) => (\n                <div className='arc_view_row' key={index}>\n                  {row.map((cell) => (\n                    <div\n                      onMouseEnter={() => {\n                        if (isRangeSelectorView) {\n                          if (isRangeSelectModeOn) {\n                            setNewSelectedRangeEnd(new Date(cell.year, cell.month, cell.date));\n                          }\n                        }\n                      }}\n                      key={cell.date}\n                      className={`arc_view_cell${cell.activeMonthInView ? ' arc_active' : ''}${\n                        cell.isWeekend ? ' arc_wknd' : ''\n                      }${cell.isToday ? ' arc_today' : ''}${cell.isFirstRow ? ' arc_fr' : ''}${\n                        cell.isToday ? ' arc_today' : ''\n                      }${cell.isHighlight ? ' arc_highlight' : ''}${cell.isLastRow ? ' arc_lr' : ''}${\n                        cell.isFirsColumn ? ' arc_fc' : ''\n                      }${cell.isLastColumn ? ' arc_lc' : ''}${\n                        cell.isSelected && !isRangeSelectorView ? ' arc_selected' : ''\n                      }${cell.isDisabled ? ' arc_disabled' : ''}${cell.isInRange ? ' arc_in_range' : ''}${\n                        cell.isRangeStart ? ' arc_range_start' : ''\n                      }${cell.isRangeEnd ? ' arc_range_end' : ''}${isRangeSelectModeOn ? ' arc_range_mode' : ''}`}>\n                      <div className='arc_view_cell_value'>\n                        <button\n                          disabled={cell.isDisabled}\n                          tabIndex={cell.isDisabled ? -1 : 0}\n                          onClick={() => onDateClicked(cell)}>\n                          {cell.date}\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n          </>\n        )}\n      </main>\n    </section>\n  );\n}\n\nexport default Calendar;\n","import React, { useCallback, useState } from 'react';\nimport ReactJson from 'react-json-view';\n\nimport Calendar from './awesome-react-calendar/calendar';\n\nimport './App.css';\n\nfunction App() {\n  const [one, setOne] = useState<object>({});\n\n  const onChangeone = useCallback(\n    (value) => {\n      setOne(value);\n    },\n    [setOne]\n  );\n\n  const [two, setTwo] = useState<object>({});\n\n  const onChangetwo = useCallback(\n    (value) => {\n      setTwo(value);\n    },\n    [setTwo]\n  );\n\n  const [three, setThree] = useState<object>({});\n\n  const onChangethree = useCallback(\n    (value) => {\n      setThree(value);\n    },\n    [setThree]\n  );\n\n  const [four, setFour] = useState<object>({});\n\n  const onChangefour = useCallback(\n    (value) => {\n      setFour(value);\n    },\n    [setFour]\n  );\n\n  const [five, setFive] = useState<object>({});\n\n  const onChangefive = useCallback(\n    (value) => {\n      setFive(value);\n    },\n    [setFive]\n  );\n\n  const [six, setSix] = useState<object>({});\n\n  const onChangesix = useCallback(\n    (value) => {\n      setSix(value);\n    },\n    [setSix]\n  );\n\n  const [seven, setSeven] = useState<object>({});\n\n  const onChangeseven = useCallback(\n    (value) => {\n      setSeven(value);\n    },\n    [setSeven]\n  );\n\n  const [eight, setEight] = useState<object>({});\n\n  const onChangeeight = useCallback(\n    (value) => {\n      setEight(value);\n    },\n    [setEight]\n  );\n\n  const [nine, setNine] = useState<object>({});\n\n  const onChangenine = useCallback(\n    (value) => {\n      setNine(value);\n    },\n    [setNine]\n  );\n\n  const [ten, setTen] = useState<object>({});\n\n  const onChangeTen = useCallback(\n    (value) => {\n      setTen(value);\n    },\n    [setTen]\n  );\n\n  const [eleven, setEleven] = useState<object>({});\n\n  const onChangeEleven = useCallback(\n    (value) => {\n      setEleven(value);\n    },\n    [setEleven]\n  );\n\n  const [tweleve, setTweleve] = useState<object>({});\n\n  const onChangeTweleve = useCallback(\n    (value) => {\n      setTweleve(value);\n    },\n    [setTweleve]\n  );\n\n  const [thirteen, setThirteen] = useState<object>({});\n\n  const onChangeThirteen = useCallback(\n    (value) => {\n      setThirteen(value);\n    },\n    [setThirteen]\n  );\n\n  const [fourteen, setFourteen] = useState<object>({});\n\n  const onChangeFourteen = useCallback(\n    (value) => {\n      setFourteen(value);\n    },\n    [setFourteen]\n  );\n\n  const [fiveteen, setFiveteen] = useState<object>({});\n\n  const onChangeFiveteen = useCallback(\n    (value) => {\n      setFiveteen(value);\n    },\n    [setFiveteen]\n  );\n\n  const maxDate = new Date(2021, 7, 28);\n  const minDate = new Date(2021, 7, 4);\n  return (\n    <div className='demo'>\n      <div>\n        <div>\n          <p>Default</p>\n        </div>\n        <div>\n          <div className='calendar'>\n            <Calendar onChange={onChangenine} />\n          </div>\n          <div className='json'>\n            <ReactJson name='value' enableClipboard={false} src={nine} />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div className='desc'>\n          <p>Multiple Dates View</p>\n        </div>\n        <div>\n          <div className='calendar'>\n            <Calendar\n              value={[new Date(2021, 6, 21), new Date(2021, 6, 25), new Date(2021, 6, 9)]}\n              isMultiSelector\n              disableToday\n              separator='/'\n              format='MM-DD-YYYY'\n              onChange={onChangeone}\n            />\n          </div>\n          <div className='json'>\n            <ReactJson name='value' enableClipboard={false} src={one} />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div>\n          <p>Range Select View</p>\n        </div>\n        <div>\n          <div className='calendar'>\n            <Calendar\n              isRangeSelector\n              rangeStart={new Date(2021, 0, 8)}\n              rangeEnd={new Date(2021, 0, 9)}\n              separator='/'\n              format='MM-DD-YYYY'\n              onChange={onChangethree}\n              // startOfWeek={2}\n              value={new Date(2021, 1, 23)}\n            />\n          </div>\n          <div className='json'>\n            <ReactJson name='value' enableClipboard={false} src={three} />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div>\n          <p>Range Select View With Min-Max Allowed Dates</p>\n        </div>\n        <div>\n          <div className='calendar'>\n            <Calendar\n              initialViewDate={new Date(2021, 7, 10)}\n              isRangeSelector\n              maxAllowedDate={maxDate}\n              minAllowedDate={minDate}\n              disableToday\n              separator='/'\n              format='MM-DD-YYYY'\n              onChange={onChangetwo}\n              // startOfWeek={2}\n            />\n          </div>\n          <div className='json'>\n            <ReactJson name='value' enableClipboard={false} src={two} />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div>\n          <p>Fixed Range View (6 Days)</p>\n        </div>\n        <div>\n          <div className='calendar'>\n            <Calendar isRangeSelector fixedRange={6} onChange={onChangeThirteen} />\n          </div>\n          <div className='json'>\n            <ReactJson name='value' enableClipboard={false} src={thirteen} />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div>\n          <p>Highlight Custom Dates</p>\n        </div>\n        <div>\n          <div className='calendar'>\n            <Calendar\n              initialViewDate={new Date(2020, 5, 6)}\n              highlights={[new Date(2020, 5, 6), new Date(2020, 5, 12), new Date(2020, 5, 16), new Date(2020, 5, 24)]}\n              onChange={onChangeFourteen}\n            />\n          </div>\n          <div className='json'>\n            <ReactJson name='value' enableClipboard={false} src={fourteen} />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div>\n          <p>Disable Custom Dates (here disabled if (date % 4 === 0))</p>\n        </div>\n        <div>\n          <div className='calendar'>\n            <Calendar\n              isDisabled={(params) => {\n                return params.date % 4 === 0;\n              }}\n              onChange={onChangeFiveteen}\n            />\n          </div>\n          <div className='json'>\n            <ReactJson name='value' enableClipboard={false} src={fiveteen} />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div>\n          <p>Can Modify Start Day Of The Week (Wed here)</p>\n        </div>\n        <div>\n          <div className='calendar'>\n            <Calendar startOfWeek={3} onChange={onChangefour} />\n          </div>\n          <div className='json'>\n            <ReactJson name='value' enableClipboard={false} src={four} />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div>\n          <p>Can Specify Weekends (Fri, Sat, Sun here)</p>\n        </div>\n        <div>\n          <div className='calendar'>\n            <Calendar weekends={[4, 5, 6]} onChange={onChangefive} />\n          </div>\n          <div className='json'>\n            <ReactJson name='value' enableClipboard={false} src={five} />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div>\n          <p>Can Set If Past Is Disabled</p>\n        </div>\n        <div>\n          <div className='calendar'>\n            <Calendar disablePast onChange={onChangesix} />\n          </div>\n          <div className='json'>\n            <ReactJson name='value' enableClipboard={false} src={six} />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div>\n          <p>Can Set If Today Is Disabled</p>\n        </div>\n        <div>\n          <div className='calendar'>\n            <Calendar\n              disableToday\n              value={new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 1)}\n              onChange={onChangeseven}\n            />\n          </div>\n          <div className='json'>\n            <ReactJson name='value' enableClipboard={false} src={seven} />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div>\n          <p>Can Set If Future Is Disabled</p>\n        </div>\n        <div>\n          <div className='calendar'>\n            <Calendar disableFuture onChange={onChangeeight} />\n          </div>\n          <div className='json'>\n            <ReactJson name='value' enableClipboard={false} src={eight} />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div>\n          <p>Can Set Output Date Format (YYYY-DD-MM here)</p>\n        </div>\n        <div>\n          <div className='calendar'>\n            <Calendar format='YYYY-DD-MM' onChange={onChangeTen} />\n          </div>\n          <div className='json'>\n            <ReactJson name='value' enableClipboard={false} src={ten} />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div>\n          <p>Can Set Output Date Separator (# here)</p>\n        </div>\n        <div>\n          <div className='calendar'>\n            <Calendar separator='#' onChange={onChangeEleven} />\n          </div>\n          <div className='json'>\n            <ReactJson name='value' enableClipboard={false} src={eleven} />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div>\n          <p>Can Set Initial Month&Date View To Show (Sept, 2020 here)</p>\n        </div>\n        <div>\n          <div className='calendar'>\n            <Calendar initialViewDate={new Date(2020, 8, 9)} onChange={onChangeTweleve} />\n          </div>\n          <div className='json'>\n            <ReactJson name='value' enableClipboard={false} src={tweleve} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}